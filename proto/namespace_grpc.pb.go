// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: namespace.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NamespaceService_CreateNode_FullMethodName      = "/namespace.NamespaceService/CreateNode"
	NamespaceService_ReadNode_FullMethodName        = "/namespace.NamespaceService/ReadNode"
	NamespaceService_UpdateNode_FullMethodName      = "/namespace.NamespaceService/UpdateNode"
	NamespaceService_DeleteNode_FullMethodName      = "/namespace.NamespaceService/DeleteNode"
	NamespaceService_BrowseNodes_FullMethodName     = "/namespace.NamespaceService/BrowseNodes"
	NamespaceService_BrowseRootNodes_FullMethodName = "/namespace.NamespaceService/BrowseRootNodes"
	NamespaceService_GetChildren_FullMethodName     = "/namespace.NamespaceService/GetChildren"
	NamespaceService_SubNode_FullMethodName         = "/namespace.NamespaceService/SubNode"
)

// NamespaceServiceClient is the client API for NamespaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Namespace service definition
type NamespaceServiceClient interface {
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*Node, error)
	ReadNode(ctx context.Context, in *ReadNodeRequest, opts ...grpc.CallOption) (*Node, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*Node, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	BrowseNodes(ctx context.Context, in *BrowseNodesRequest, opts ...grpc.CallOption) (*BrowseNodesResponse, error)
	BrowseRootNodes(ctx context.Context, in *BrowseRootNodesRequest, opts ...grpc.CallOption) (*BrowseNodesResponse, error)
	GetChildren(ctx context.Context, in *ReadNodeRequest, opts ...grpc.CallOption) (*BrowseNodesResponse, error)
	SubNode(ctx context.Context, in *SubNodeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeUpdate], error)
}

type namespaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceServiceClient(cc grpc.ClientConnInterface) NamespaceServiceClient {
	return &namespaceServiceClient{cc}
}

func (c *namespaceServiceClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Node)
	err := c.cc.Invoke(ctx, NamespaceService_CreateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) ReadNode(ctx context.Context, in *ReadNodeRequest, opts ...grpc.CallOption) (*Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Node)
	err := c.cc.Invoke(ctx, NamespaceService_ReadNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Node)
	err := c.cc.Invoke(ctx, NamespaceService_UpdateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNodeResponse)
	err := c.cc.Invoke(ctx, NamespaceService_DeleteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) BrowseNodes(ctx context.Context, in *BrowseNodesRequest, opts ...grpc.CallOption) (*BrowseNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrowseNodesResponse)
	err := c.cc.Invoke(ctx, NamespaceService_BrowseNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) BrowseRootNodes(ctx context.Context, in *BrowseRootNodesRequest, opts ...grpc.CallOption) (*BrowseNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrowseNodesResponse)
	err := c.cc.Invoke(ctx, NamespaceService_BrowseRootNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) GetChildren(ctx context.Context, in *ReadNodeRequest, opts ...grpc.CallOption) (*BrowseNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrowseNodesResponse)
	err := c.cc.Invoke(ctx, NamespaceService_GetChildren_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceServiceClient) SubNode(ctx context.Context, in *SubNodeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NodeUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NamespaceService_ServiceDesc.Streams[0], NamespaceService_SubNode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubNodeRequest, NodeUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamespaceService_SubNodeClient = grpc.ServerStreamingClient[NodeUpdate]

// NamespaceServiceServer is the server API for NamespaceService service.
// All implementations must embed UnimplementedNamespaceServiceServer
// for forward compatibility.
//
// The Namespace service definition
type NamespaceServiceServer interface {
	CreateNode(context.Context, *CreateNodeRequest) (*Node, error)
	ReadNode(context.Context, *ReadNodeRequest) (*Node, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*Node, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error)
	BrowseNodes(context.Context, *BrowseNodesRequest) (*BrowseNodesResponse, error)
	BrowseRootNodes(context.Context, *BrowseRootNodesRequest) (*BrowseNodesResponse, error)
	GetChildren(context.Context, *ReadNodeRequest) (*BrowseNodesResponse, error)
	SubNode(*SubNodeRequest, grpc.ServerStreamingServer[NodeUpdate]) error
	mustEmbedUnimplementedNamespaceServiceServer()
}

// UnimplementedNamespaceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNamespaceServiceServer struct{}

func (UnimplementedNamespaceServiceServer) CreateNode(context.Context, *CreateNodeRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedNamespaceServiceServer) ReadNode(context.Context, *ReadNodeRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNode not implemented")
}
func (UnimplementedNamespaceServiceServer) UpdateNode(context.Context, *UpdateNodeRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedNamespaceServiceServer) DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedNamespaceServiceServer) BrowseNodes(context.Context, *BrowseNodesRequest) (*BrowseNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowseNodes not implemented")
}
func (UnimplementedNamespaceServiceServer) BrowseRootNodes(context.Context, *BrowseRootNodesRequest) (*BrowseNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowseRootNodes not implemented")
}
func (UnimplementedNamespaceServiceServer) GetChildren(context.Context, *ReadNodeRequest) (*BrowseNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildren not implemented")
}
func (UnimplementedNamespaceServiceServer) SubNode(*SubNodeRequest, grpc.ServerStreamingServer[NodeUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SubNode not implemented")
}
func (UnimplementedNamespaceServiceServer) mustEmbedUnimplementedNamespaceServiceServer() {}
func (UnimplementedNamespaceServiceServer) testEmbeddedByValue()                          {}

// UnsafeNamespaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceServiceServer will
// result in compilation errors.
type UnsafeNamespaceServiceServer interface {
	mustEmbedUnimplementedNamespaceServiceServer()
}

func RegisterNamespaceServiceServer(s grpc.ServiceRegistrar, srv NamespaceServiceServer) {
	// If the following call pancis, it indicates UnimplementedNamespaceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NamespaceService_ServiceDesc, srv)
}

func _NamespaceService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceService_CreateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_ReadNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).ReadNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceService_ReadNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).ReadNode(ctx, req.(*ReadNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceService_UpdateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceService_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_BrowseNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).BrowseNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceService_BrowseNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).BrowseNodes(ctx, req.(*BrowseNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_BrowseRootNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseRootNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).BrowseRootNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceService_BrowseRootNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).BrowseRootNodes(ctx, req.(*BrowseRootNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_GetChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServiceServer).GetChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamespaceService_GetChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServiceServer).GetChildren(ctx, req.(*ReadNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamespaceService_SubNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubNodeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NamespaceServiceServer).SubNode(m, &grpc.GenericServerStream[SubNodeRequest, NodeUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NamespaceService_SubNodeServer = grpc.ServerStreamingServer[NodeUpdate]

// NamespaceService_ServiceDesc is the grpc.ServiceDesc for NamespaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamespaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "namespace.NamespaceService",
	HandlerType: (*NamespaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNode",
			Handler:    _NamespaceService_CreateNode_Handler,
		},
		{
			MethodName: "ReadNode",
			Handler:    _NamespaceService_ReadNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _NamespaceService_UpdateNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _NamespaceService_DeleteNode_Handler,
		},
		{
			MethodName: "BrowseNodes",
			Handler:    _NamespaceService_BrowseNodes_Handler,
		},
		{
			MethodName: "BrowseRootNodes",
			Handler:    _NamespaceService_BrowseRootNodes_Handler,
		},
		{
			MethodName: "GetChildren",
			Handler:    _NamespaceService_GetChildren_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubNode",
			Handler:       _NamespaceService_SubNode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "namespace.proto",
}
