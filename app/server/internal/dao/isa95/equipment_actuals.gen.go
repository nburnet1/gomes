// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newEquipmentActual(db *gorm.DB, opts ...gen.DOOption) equipmentActual {
	_equipmentActual := equipmentActual{}

	_equipmentActual.equipmentActualDo.UseDB(db, opts...)
	_equipmentActual.equipmentActualDo.UseModel(&isa95.EquipmentActual{})

	tableName := _equipmentActual.equipmentActualDo.TableName()
	_equipmentActual.ALL = field.NewAsterisk(tableName)
	_equipmentActual.ID = field.NewUint(tableName, "id")
	_equipmentActual.CreatedAt = field.NewTime(tableName, "created_at")
	_equipmentActual.UpdatedAt = field.NewTime(tableName, "updated_at")
	_equipmentActual.DeletedAt = field.NewField(tableName, "deleted_at")
	_equipmentActual.EquipmentClassID = field.NewUint(tableName, "equipment_class_id")
	_equipmentActual.EquipmentID = field.NewUint(tableName, "equipment_id")
	_equipmentActual.Description = field.NewString(tableName, "description")
	_equipmentActual.UseID = field.NewUint(tableName, "use_id")
	_equipmentActual.Quantity = field.NewUint(tableName, "quantity")
	_equipmentActual.MeasurementID = field.NewUint(tableName, "measurement_id")
	_equipmentActual.Measurement = equipmentActualBelongsToMeasurement{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Measurement", "isa95.Measurement"),
	}

	_equipmentActual.fillFieldMap()

	return _equipmentActual
}

type equipmentActual struct {
	equipmentActualDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	EquipmentClassID field.Uint
	EquipmentID      field.Uint
	Description      field.String
	UseID            field.Uint
	Quantity         field.Uint
	MeasurementID    field.Uint
	Measurement      equipmentActualBelongsToMeasurement

	fieldMap map[string]field.Expr
}

func (e equipmentActual) Table(newTableName string) *equipmentActual {
	e.equipmentActualDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e equipmentActual) As(alias string) *equipmentActual {
	e.equipmentActualDo.DO = *(e.equipmentActualDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *equipmentActual) updateTableName(table string) *equipmentActual {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewUint(table, "id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.EquipmentClassID = field.NewUint(table, "equipment_class_id")
	e.EquipmentID = field.NewUint(table, "equipment_id")
	e.Description = field.NewString(table, "description")
	e.UseID = field.NewUint(table, "use_id")
	e.Quantity = field.NewUint(table, "quantity")
	e.MeasurementID = field.NewUint(table, "measurement_id")

	e.fillFieldMap()

	return e
}

func (e *equipmentActual) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *equipmentActual) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 11)
	e.fieldMap["id"] = e.ID
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["equipment_class_id"] = e.EquipmentClassID
	e.fieldMap["equipment_id"] = e.EquipmentID
	e.fieldMap["description"] = e.Description
	e.fieldMap["use_id"] = e.UseID
	e.fieldMap["quantity"] = e.Quantity
	e.fieldMap["measurement_id"] = e.MeasurementID

}

func (e equipmentActual) clone(db *gorm.DB) equipmentActual {
	e.equipmentActualDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e equipmentActual) replaceDB(db *gorm.DB) equipmentActual {
	e.equipmentActualDo.ReplaceDB(db)
	return e
}

type equipmentActualBelongsToMeasurement struct {
	db *gorm.DB

	field.RelationField
}

func (a equipmentActualBelongsToMeasurement) Where(conds ...field.Expr) *equipmentActualBelongsToMeasurement {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a equipmentActualBelongsToMeasurement) WithContext(ctx context.Context) *equipmentActualBelongsToMeasurement {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a equipmentActualBelongsToMeasurement) Session(session *gorm.Session) *equipmentActualBelongsToMeasurement {
	a.db = a.db.Session(session)
	return &a
}

func (a equipmentActualBelongsToMeasurement) Model(m *isa95.EquipmentActual) *equipmentActualBelongsToMeasurementTx {
	return &equipmentActualBelongsToMeasurementTx{a.db.Model(m).Association(a.Name())}
}

type equipmentActualBelongsToMeasurementTx struct{ tx *gorm.Association }

func (a equipmentActualBelongsToMeasurementTx) Find() (result *isa95.Measurement, err error) {
	return result, a.tx.Find(&result)
}

func (a equipmentActualBelongsToMeasurementTx) Append(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a equipmentActualBelongsToMeasurementTx) Replace(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a equipmentActualBelongsToMeasurementTx) Delete(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a equipmentActualBelongsToMeasurementTx) Clear() error {
	return a.tx.Clear()
}

func (a equipmentActualBelongsToMeasurementTx) Count() int64 {
	return a.tx.Count()
}

type equipmentActualDo struct{ gen.DO }

func (e equipmentActualDo) Debug() *equipmentActualDo {
	return e.withDO(e.DO.Debug())
}

func (e equipmentActualDo) WithContext(ctx context.Context) *equipmentActualDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e equipmentActualDo) ReadDB() *equipmentActualDo {
	return e.Clauses(dbresolver.Read)
}

func (e equipmentActualDo) WriteDB() *equipmentActualDo {
	return e.Clauses(dbresolver.Write)
}

func (e equipmentActualDo) Session(config *gorm.Session) *equipmentActualDo {
	return e.withDO(e.DO.Session(config))
}

func (e equipmentActualDo) Clauses(conds ...clause.Expression) *equipmentActualDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e equipmentActualDo) Returning(value interface{}, columns ...string) *equipmentActualDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e equipmentActualDo) Not(conds ...gen.Condition) *equipmentActualDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e equipmentActualDo) Or(conds ...gen.Condition) *equipmentActualDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e equipmentActualDo) Select(conds ...field.Expr) *equipmentActualDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e equipmentActualDo) Where(conds ...gen.Condition) *equipmentActualDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e equipmentActualDo) Order(conds ...field.Expr) *equipmentActualDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e equipmentActualDo) Distinct(cols ...field.Expr) *equipmentActualDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e equipmentActualDo) Omit(cols ...field.Expr) *equipmentActualDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e equipmentActualDo) Join(table schema.Tabler, on ...field.Expr) *equipmentActualDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e equipmentActualDo) LeftJoin(table schema.Tabler, on ...field.Expr) *equipmentActualDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e equipmentActualDo) RightJoin(table schema.Tabler, on ...field.Expr) *equipmentActualDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e equipmentActualDo) Group(cols ...field.Expr) *equipmentActualDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e equipmentActualDo) Having(conds ...gen.Condition) *equipmentActualDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e equipmentActualDo) Limit(limit int) *equipmentActualDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e equipmentActualDo) Offset(offset int) *equipmentActualDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e equipmentActualDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *equipmentActualDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e equipmentActualDo) Unscoped() *equipmentActualDo {
	return e.withDO(e.DO.Unscoped())
}

func (e equipmentActualDo) Create(values ...*isa95.EquipmentActual) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e equipmentActualDo) CreateInBatches(values []*isa95.EquipmentActual, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e equipmentActualDo) Save(values ...*isa95.EquipmentActual) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e equipmentActualDo) First() (*isa95.EquipmentActual, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentActual), nil
	}
}

func (e equipmentActualDo) Take() (*isa95.EquipmentActual, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentActual), nil
	}
}

func (e equipmentActualDo) Last() (*isa95.EquipmentActual, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentActual), nil
	}
}

func (e equipmentActualDo) Find() ([]*isa95.EquipmentActual, error) {
	result, err := e.DO.Find()
	return result.([]*isa95.EquipmentActual), err
}

func (e equipmentActualDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.EquipmentActual, err error) {
	buf := make([]*isa95.EquipmentActual, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e equipmentActualDo) FindInBatches(result *[]*isa95.EquipmentActual, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e equipmentActualDo) Attrs(attrs ...field.AssignExpr) *equipmentActualDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e equipmentActualDo) Assign(attrs ...field.AssignExpr) *equipmentActualDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e equipmentActualDo) Joins(fields ...field.RelationField) *equipmentActualDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e equipmentActualDo) Preload(fields ...field.RelationField) *equipmentActualDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e equipmentActualDo) FirstOrInit() (*isa95.EquipmentActual, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentActual), nil
	}
}

func (e equipmentActualDo) FirstOrCreate() (*isa95.EquipmentActual, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentActual), nil
	}
}

func (e equipmentActualDo) FindByPage(offset int, limit int) (result []*isa95.EquipmentActual, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e equipmentActualDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e equipmentActualDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e equipmentActualDo) Delete(models ...*isa95.EquipmentActual) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *equipmentActualDo) withDO(do gen.Dao) *equipmentActualDo {
	e.DO = *do.(*gen.DO)
	return e
}
