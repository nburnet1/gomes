// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newOperationSegmentDependency(db *gorm.DB, opts ...gen.DOOption) operationSegmentDependency {
	_operationSegmentDependency := operationSegmentDependency{}

	_operationSegmentDependency.operationSegmentDependencyDo.UseDB(db, opts...)
	_operationSegmentDependency.operationSegmentDependencyDo.UseModel(&isa95.OperationSegmentDependency{})

	tableName := _operationSegmentDependency.operationSegmentDependencyDo.TableName()
	_operationSegmentDependency.ALL = field.NewAsterisk(tableName)
	_operationSegmentDependency.ID = field.NewUint(tableName, "id")
	_operationSegmentDependency.CreatedAt = field.NewTime(tableName, "created_at")
	_operationSegmentDependency.UpdatedAt = field.NewTime(tableName, "updated_at")
	_operationSegmentDependency.DeletedAt = field.NewField(tableName, "deleted_at")
	_operationSegmentDependency.Code = field.NewString(tableName, "code")
	_operationSegmentDependency.Description = field.NewString(tableName, "description")
	_operationSegmentDependency.DependencyType = field.NewString(tableName, "dependency_type")
	_operationSegmentDependency.DependencyFactor = field.NewString(tableName, "dependency_factor")
	_operationSegmentDependency.MeasurementID = field.NewUint(tableName, "measurement_id")
	_operationSegmentDependency.Measurement = operationSegmentDependencyBelongsToMeasurement{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Measurement", "isa95.Measurement"),
	}

	_operationSegmentDependency.fillFieldMap()

	return _operationSegmentDependency
}

type operationSegmentDependency struct {
	operationSegmentDependencyDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	Code             field.String
	Description      field.String
	DependencyType   field.String
	DependencyFactor field.String
	MeasurementID    field.Uint
	Measurement      operationSegmentDependencyBelongsToMeasurement

	fieldMap map[string]field.Expr
}

func (o operationSegmentDependency) Table(newTableName string) *operationSegmentDependency {
	o.operationSegmentDependencyDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o operationSegmentDependency) As(alias string) *operationSegmentDependency {
	o.operationSegmentDependencyDo.DO = *(o.operationSegmentDependencyDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *operationSegmentDependency) updateTableName(table string) *operationSegmentDependency {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.Code = field.NewString(table, "code")
	o.Description = field.NewString(table, "description")
	o.DependencyType = field.NewString(table, "dependency_type")
	o.DependencyFactor = field.NewString(table, "dependency_factor")
	o.MeasurementID = field.NewUint(table, "measurement_id")

	o.fillFieldMap()

	return o
}

func (o *operationSegmentDependency) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *operationSegmentDependency) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 10)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["code"] = o.Code
	o.fieldMap["description"] = o.Description
	o.fieldMap["dependency_type"] = o.DependencyType
	o.fieldMap["dependency_factor"] = o.DependencyFactor
	o.fieldMap["measurement_id"] = o.MeasurementID

}

func (o operationSegmentDependency) clone(db *gorm.DB) operationSegmentDependency {
	o.operationSegmentDependencyDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o operationSegmentDependency) replaceDB(db *gorm.DB) operationSegmentDependency {
	o.operationSegmentDependencyDo.ReplaceDB(db)
	return o
}

type operationSegmentDependencyBelongsToMeasurement struct {
	db *gorm.DB

	field.RelationField
}

func (a operationSegmentDependencyBelongsToMeasurement) Where(conds ...field.Expr) *operationSegmentDependencyBelongsToMeasurement {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a operationSegmentDependencyBelongsToMeasurement) WithContext(ctx context.Context) *operationSegmentDependencyBelongsToMeasurement {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a operationSegmentDependencyBelongsToMeasurement) Session(session *gorm.Session) *operationSegmentDependencyBelongsToMeasurement {
	a.db = a.db.Session(session)
	return &a
}

func (a operationSegmentDependencyBelongsToMeasurement) Model(m *isa95.OperationSegmentDependency) *operationSegmentDependencyBelongsToMeasurementTx {
	return &operationSegmentDependencyBelongsToMeasurementTx{a.db.Model(m).Association(a.Name())}
}

type operationSegmentDependencyBelongsToMeasurementTx struct{ tx *gorm.Association }

func (a operationSegmentDependencyBelongsToMeasurementTx) Find() (result *isa95.Measurement, err error) {
	return result, a.tx.Find(&result)
}

func (a operationSegmentDependencyBelongsToMeasurementTx) Append(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a operationSegmentDependencyBelongsToMeasurementTx) Replace(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a operationSegmentDependencyBelongsToMeasurementTx) Delete(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a operationSegmentDependencyBelongsToMeasurementTx) Clear() error {
	return a.tx.Clear()
}

func (a operationSegmentDependencyBelongsToMeasurementTx) Count() int64 {
	return a.tx.Count()
}

type operationSegmentDependencyDo struct{ gen.DO }

func (o operationSegmentDependencyDo) Debug() *operationSegmentDependencyDo {
	return o.withDO(o.DO.Debug())
}

func (o operationSegmentDependencyDo) WithContext(ctx context.Context) *operationSegmentDependencyDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o operationSegmentDependencyDo) ReadDB() *operationSegmentDependencyDo {
	return o.Clauses(dbresolver.Read)
}

func (o operationSegmentDependencyDo) WriteDB() *operationSegmentDependencyDo {
	return o.Clauses(dbresolver.Write)
}

func (o operationSegmentDependencyDo) Session(config *gorm.Session) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Session(config))
}

func (o operationSegmentDependencyDo) Clauses(conds ...clause.Expression) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o operationSegmentDependencyDo) Returning(value interface{}, columns ...string) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o operationSegmentDependencyDo) Not(conds ...gen.Condition) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o operationSegmentDependencyDo) Or(conds ...gen.Condition) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o operationSegmentDependencyDo) Select(conds ...field.Expr) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o operationSegmentDependencyDo) Where(conds ...gen.Condition) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o operationSegmentDependencyDo) Order(conds ...field.Expr) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o operationSegmentDependencyDo) Distinct(cols ...field.Expr) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o operationSegmentDependencyDo) Omit(cols ...field.Expr) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o operationSegmentDependencyDo) Join(table schema.Tabler, on ...field.Expr) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o operationSegmentDependencyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *operationSegmentDependencyDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o operationSegmentDependencyDo) RightJoin(table schema.Tabler, on ...field.Expr) *operationSegmentDependencyDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o operationSegmentDependencyDo) Group(cols ...field.Expr) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o operationSegmentDependencyDo) Having(conds ...gen.Condition) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o operationSegmentDependencyDo) Limit(limit int) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o operationSegmentDependencyDo) Offset(offset int) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o operationSegmentDependencyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o operationSegmentDependencyDo) Unscoped() *operationSegmentDependencyDo {
	return o.withDO(o.DO.Unscoped())
}

func (o operationSegmentDependencyDo) Create(values ...*isa95.OperationSegmentDependency) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o operationSegmentDependencyDo) CreateInBatches(values []*isa95.OperationSegmentDependency, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o operationSegmentDependencyDo) Save(values ...*isa95.OperationSegmentDependency) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o operationSegmentDependencyDo) First() (*isa95.OperationSegmentDependency, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationSegmentDependency), nil
	}
}

func (o operationSegmentDependencyDo) Take() (*isa95.OperationSegmentDependency, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationSegmentDependency), nil
	}
}

func (o operationSegmentDependencyDo) Last() (*isa95.OperationSegmentDependency, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationSegmentDependency), nil
	}
}

func (o operationSegmentDependencyDo) Find() ([]*isa95.OperationSegmentDependency, error) {
	result, err := o.DO.Find()
	return result.([]*isa95.OperationSegmentDependency), err
}

func (o operationSegmentDependencyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.OperationSegmentDependency, err error) {
	buf := make([]*isa95.OperationSegmentDependency, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o operationSegmentDependencyDo) FindInBatches(result *[]*isa95.OperationSegmentDependency, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o operationSegmentDependencyDo) Attrs(attrs ...field.AssignExpr) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o operationSegmentDependencyDo) Assign(attrs ...field.AssignExpr) *operationSegmentDependencyDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o operationSegmentDependencyDo) Joins(fields ...field.RelationField) *operationSegmentDependencyDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o operationSegmentDependencyDo) Preload(fields ...field.RelationField) *operationSegmentDependencyDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o operationSegmentDependencyDo) FirstOrInit() (*isa95.OperationSegmentDependency, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationSegmentDependency), nil
	}
}

func (o operationSegmentDependencyDo) FirstOrCreate() (*isa95.OperationSegmentDependency, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationSegmentDependency), nil
	}
}

func (o operationSegmentDependencyDo) FindByPage(offset int, limit int) (result []*isa95.OperationSegmentDependency, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o operationSegmentDependencyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o operationSegmentDependencyDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o operationSegmentDependencyDo) Delete(models ...*isa95.OperationSegmentDependency) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *operationSegmentDependencyDo) withDO(do gen.Dao) *operationSegmentDependencyDo {
	o.DO = *do.(*gen.DO)
	return o
}
