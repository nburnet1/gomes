// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newLevelLookup(db *gorm.DB, opts ...gen.DOOption) levelLookup {
	_levelLookup := levelLookup{}

	_levelLookup.levelLookupDo.UseDB(db, opts...)
	_levelLookup.levelLookupDo.UseModel(&isa95.LevelLookup{})

	tableName := _levelLookup.levelLookupDo.TableName()
	_levelLookup.ALL = field.NewAsterisk(tableName)
	_levelLookup.ID = field.NewUint(tableName, "id")
	_levelLookup.CreatedAt = field.NewTime(tableName, "created_at")
	_levelLookup.UpdatedAt = field.NewTime(tableName, "updated_at")
	_levelLookup.DeletedAt = field.NewField(tableName, "deleted_at")
	_levelLookup.Code = field.NewUint(tableName, "code")
	_levelLookup.Name = field.NewString(tableName, "name")

	_levelLookup.fillFieldMap()

	return _levelLookup
}

type levelLookup struct {
	levelLookupDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Code      field.Uint
	Name      field.String

	fieldMap map[string]field.Expr
}

func (l levelLookup) Table(newTableName string) *levelLookup {
	l.levelLookupDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l levelLookup) As(alias string) *levelLookup {
	l.levelLookupDo.DO = *(l.levelLookupDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *levelLookup) updateTableName(table string) *levelLookup {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")
	l.Code = field.NewUint(table, "code")
	l.Name = field.NewString(table, "name")

	l.fillFieldMap()

	return l
}

func (l *levelLookup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *levelLookup) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 6)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["code"] = l.Code
	l.fieldMap["name"] = l.Name
}

func (l levelLookup) clone(db *gorm.DB) levelLookup {
	l.levelLookupDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l levelLookup) replaceDB(db *gorm.DB) levelLookup {
	l.levelLookupDo.ReplaceDB(db)
	return l
}

type levelLookupDo struct{ gen.DO }

func (l levelLookupDo) Debug() *levelLookupDo {
	return l.withDO(l.DO.Debug())
}

func (l levelLookupDo) WithContext(ctx context.Context) *levelLookupDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l levelLookupDo) ReadDB() *levelLookupDo {
	return l.Clauses(dbresolver.Read)
}

func (l levelLookupDo) WriteDB() *levelLookupDo {
	return l.Clauses(dbresolver.Write)
}

func (l levelLookupDo) Session(config *gorm.Session) *levelLookupDo {
	return l.withDO(l.DO.Session(config))
}

func (l levelLookupDo) Clauses(conds ...clause.Expression) *levelLookupDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l levelLookupDo) Returning(value interface{}, columns ...string) *levelLookupDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l levelLookupDo) Not(conds ...gen.Condition) *levelLookupDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l levelLookupDo) Or(conds ...gen.Condition) *levelLookupDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l levelLookupDo) Select(conds ...field.Expr) *levelLookupDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l levelLookupDo) Where(conds ...gen.Condition) *levelLookupDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l levelLookupDo) Order(conds ...field.Expr) *levelLookupDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l levelLookupDo) Distinct(cols ...field.Expr) *levelLookupDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l levelLookupDo) Omit(cols ...field.Expr) *levelLookupDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l levelLookupDo) Join(table schema.Tabler, on ...field.Expr) *levelLookupDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l levelLookupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *levelLookupDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l levelLookupDo) RightJoin(table schema.Tabler, on ...field.Expr) *levelLookupDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l levelLookupDo) Group(cols ...field.Expr) *levelLookupDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l levelLookupDo) Having(conds ...gen.Condition) *levelLookupDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l levelLookupDo) Limit(limit int) *levelLookupDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l levelLookupDo) Offset(offset int) *levelLookupDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l levelLookupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *levelLookupDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l levelLookupDo) Unscoped() *levelLookupDo {
	return l.withDO(l.DO.Unscoped())
}

func (l levelLookupDo) Create(values ...*isa95.LevelLookup) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l levelLookupDo) CreateInBatches(values []*isa95.LevelLookup, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l levelLookupDo) Save(values ...*isa95.LevelLookup) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l levelLookupDo) First() (*isa95.LevelLookup, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.LevelLookup), nil
	}
}

func (l levelLookupDo) Take() (*isa95.LevelLookup, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.LevelLookup), nil
	}
}

func (l levelLookupDo) Last() (*isa95.LevelLookup, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.LevelLookup), nil
	}
}

func (l levelLookupDo) Find() ([]*isa95.LevelLookup, error) {
	result, err := l.DO.Find()
	return result.([]*isa95.LevelLookup), err
}

func (l levelLookupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.LevelLookup, err error) {
	buf := make([]*isa95.LevelLookup, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l levelLookupDo) FindInBatches(result *[]*isa95.LevelLookup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l levelLookupDo) Attrs(attrs ...field.AssignExpr) *levelLookupDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l levelLookupDo) Assign(attrs ...field.AssignExpr) *levelLookupDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l levelLookupDo) Joins(fields ...field.RelationField) *levelLookupDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l levelLookupDo) Preload(fields ...field.RelationField) *levelLookupDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l levelLookupDo) FirstOrInit() (*isa95.LevelLookup, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.LevelLookup), nil
	}
}

func (l levelLookupDo) FirstOrCreate() (*isa95.LevelLookup, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.LevelLookup), nil
	}
}

func (l levelLookupDo) FindByPage(offset int, limit int) (result []*isa95.LevelLookup, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l levelLookupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l levelLookupDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l levelLookupDo) Delete(models ...*isa95.LevelLookup) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *levelLookupDo) withDO(do gen.Dao) *levelLookupDo {
	l.DO = *do.(*gen.DO)
	return l
}
