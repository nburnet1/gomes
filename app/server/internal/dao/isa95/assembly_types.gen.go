// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newAssemblyType(db *gorm.DB, opts ...gen.DOOption) assemblyType {
	_assemblyType := assemblyType{}

	_assemblyType.assemblyTypeDo.UseDB(db, opts...)
	_assemblyType.assemblyTypeDo.UseModel(&isa95.AssemblyType{})

	tableName := _assemblyType.assemblyTypeDo.TableName()
	_assemblyType.ALL = field.NewAsterisk(tableName)
	_assemblyType.ID = field.NewUint(tableName, "id")
	_assemblyType.CreatedAt = field.NewTime(tableName, "created_at")
	_assemblyType.UpdatedAt = field.NewTime(tableName, "updated_at")
	_assemblyType.DeletedAt = field.NewField(tableName, "deleted_at")
	_assemblyType.Code = field.NewUint(tableName, "code")
	_assemblyType.Name = field.NewString(tableName, "name")

	_assemblyType.fillFieldMap()

	return _assemblyType
}

type assemblyType struct {
	assemblyTypeDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Code      field.Uint
	Name      field.String

	fieldMap map[string]field.Expr
}

func (a assemblyType) Table(newTableName string) *assemblyType {
	a.assemblyTypeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a assemblyType) As(alias string) *assemblyType {
	a.assemblyTypeDo.DO = *(a.assemblyTypeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *assemblyType) updateTableName(table string) *assemblyType {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.Code = field.NewUint(table, "code")
	a.Name = field.NewString(table, "name")

	a.fillFieldMap()

	return a
}

func (a *assemblyType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *assemblyType) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["code"] = a.Code
	a.fieldMap["name"] = a.Name
}

func (a assemblyType) clone(db *gorm.DB) assemblyType {
	a.assemblyTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a assemblyType) replaceDB(db *gorm.DB) assemblyType {
	a.assemblyTypeDo.ReplaceDB(db)
	return a
}

type assemblyTypeDo struct{ gen.DO }

func (a assemblyTypeDo) Debug() *assemblyTypeDo {
	return a.withDO(a.DO.Debug())
}

func (a assemblyTypeDo) WithContext(ctx context.Context) *assemblyTypeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a assemblyTypeDo) ReadDB() *assemblyTypeDo {
	return a.Clauses(dbresolver.Read)
}

func (a assemblyTypeDo) WriteDB() *assemblyTypeDo {
	return a.Clauses(dbresolver.Write)
}

func (a assemblyTypeDo) Session(config *gorm.Session) *assemblyTypeDo {
	return a.withDO(a.DO.Session(config))
}

func (a assemblyTypeDo) Clauses(conds ...clause.Expression) *assemblyTypeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a assemblyTypeDo) Returning(value interface{}, columns ...string) *assemblyTypeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a assemblyTypeDo) Not(conds ...gen.Condition) *assemblyTypeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a assemblyTypeDo) Or(conds ...gen.Condition) *assemblyTypeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a assemblyTypeDo) Select(conds ...field.Expr) *assemblyTypeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a assemblyTypeDo) Where(conds ...gen.Condition) *assemblyTypeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a assemblyTypeDo) Order(conds ...field.Expr) *assemblyTypeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a assemblyTypeDo) Distinct(cols ...field.Expr) *assemblyTypeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a assemblyTypeDo) Omit(cols ...field.Expr) *assemblyTypeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a assemblyTypeDo) Join(table schema.Tabler, on ...field.Expr) *assemblyTypeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a assemblyTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *assemblyTypeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a assemblyTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *assemblyTypeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a assemblyTypeDo) Group(cols ...field.Expr) *assemblyTypeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a assemblyTypeDo) Having(conds ...gen.Condition) *assemblyTypeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a assemblyTypeDo) Limit(limit int) *assemblyTypeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a assemblyTypeDo) Offset(offset int) *assemblyTypeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a assemblyTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *assemblyTypeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a assemblyTypeDo) Unscoped() *assemblyTypeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a assemblyTypeDo) Create(values ...*isa95.AssemblyType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a assemblyTypeDo) CreateInBatches(values []*isa95.AssemblyType, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a assemblyTypeDo) Save(values ...*isa95.AssemblyType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a assemblyTypeDo) First() (*isa95.AssemblyType, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.AssemblyType), nil
	}
}

func (a assemblyTypeDo) Take() (*isa95.AssemblyType, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.AssemblyType), nil
	}
}

func (a assemblyTypeDo) Last() (*isa95.AssemblyType, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.AssemblyType), nil
	}
}

func (a assemblyTypeDo) Find() ([]*isa95.AssemblyType, error) {
	result, err := a.DO.Find()
	return result.([]*isa95.AssemblyType), err
}

func (a assemblyTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.AssemblyType, err error) {
	buf := make([]*isa95.AssemblyType, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a assemblyTypeDo) FindInBatches(result *[]*isa95.AssemblyType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a assemblyTypeDo) Attrs(attrs ...field.AssignExpr) *assemblyTypeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a assemblyTypeDo) Assign(attrs ...field.AssignExpr) *assemblyTypeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a assemblyTypeDo) Joins(fields ...field.RelationField) *assemblyTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a assemblyTypeDo) Preload(fields ...field.RelationField) *assemblyTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a assemblyTypeDo) FirstOrInit() (*isa95.AssemblyType, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.AssemblyType), nil
	}
}

func (a assemblyTypeDo) FirstOrCreate() (*isa95.AssemblyType, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.AssemblyType), nil
	}
}

func (a assemblyTypeDo) FindByPage(offset int, limit int) (result []*isa95.AssemblyType, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a assemblyTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a assemblyTypeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a assemblyTypeDo) Delete(models ...*isa95.AssemblyType) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *assemblyTypeDo) withDO(do gen.Dao) *assemblyTypeDo {
	a.DO = *do.(*gen.DO)
	return a
}
