// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newPhysicalAssetClass(db *gorm.DB, opts ...gen.DOOption) physicalAssetClass {
	_physicalAssetClass := physicalAssetClass{}

	_physicalAssetClass.physicalAssetClassDo.UseDB(db, opts...)
	_physicalAssetClass.physicalAssetClassDo.UseModel(&isa95.PhysicalAssetClass{})

	tableName := _physicalAssetClass.physicalAssetClassDo.TableName()
	_physicalAssetClass.ALL = field.NewAsterisk(tableName)
	_physicalAssetClass.ID = field.NewUint(tableName, "id")
	_physicalAssetClass.CreatedAt = field.NewTime(tableName, "created_at")
	_physicalAssetClass.UpdatedAt = field.NewTime(tableName, "updated_at")
	_physicalAssetClass.DeletedAt = field.NewField(tableName, "deleted_at")
	_physicalAssetClass.Manufacturer = field.NewString(tableName, "manufacturer")
	_physicalAssetClass.ModelID = field.NewString(tableName, "model_id")
	_physicalAssetClass.Description = field.NewString(tableName, "description")

	_physicalAssetClass.fillFieldMap()

	return _physicalAssetClass
}

type physicalAssetClass struct {
	physicalAssetClassDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	Manufacturer field.String
	ModelID      field.String
	Description  field.String

	fieldMap map[string]field.Expr
}

func (p physicalAssetClass) Table(newTableName string) *physicalAssetClass {
	p.physicalAssetClassDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p physicalAssetClass) As(alias string) *physicalAssetClass {
	p.physicalAssetClassDo.DO = *(p.physicalAssetClassDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *physicalAssetClass) updateTableName(table string) *physicalAssetClass {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Manufacturer = field.NewString(table, "manufacturer")
	p.ModelID = field.NewString(table, "model_id")
	p.Description = field.NewString(table, "description")

	p.fillFieldMap()

	return p
}

func (p *physicalAssetClass) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *physicalAssetClass) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["manufacturer"] = p.Manufacturer
	p.fieldMap["model_id"] = p.ModelID
	p.fieldMap["description"] = p.Description
}

func (p physicalAssetClass) clone(db *gorm.DB) physicalAssetClass {
	p.physicalAssetClassDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p physicalAssetClass) replaceDB(db *gorm.DB) physicalAssetClass {
	p.physicalAssetClassDo.ReplaceDB(db)
	return p
}

type physicalAssetClassDo struct{ gen.DO }

func (p physicalAssetClassDo) Debug() *physicalAssetClassDo {
	return p.withDO(p.DO.Debug())
}

func (p physicalAssetClassDo) WithContext(ctx context.Context) *physicalAssetClassDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p physicalAssetClassDo) ReadDB() *physicalAssetClassDo {
	return p.Clauses(dbresolver.Read)
}

func (p physicalAssetClassDo) WriteDB() *physicalAssetClassDo {
	return p.Clauses(dbresolver.Write)
}

func (p physicalAssetClassDo) Session(config *gorm.Session) *physicalAssetClassDo {
	return p.withDO(p.DO.Session(config))
}

func (p physicalAssetClassDo) Clauses(conds ...clause.Expression) *physicalAssetClassDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p physicalAssetClassDo) Returning(value interface{}, columns ...string) *physicalAssetClassDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p physicalAssetClassDo) Not(conds ...gen.Condition) *physicalAssetClassDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p physicalAssetClassDo) Or(conds ...gen.Condition) *physicalAssetClassDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p physicalAssetClassDo) Select(conds ...field.Expr) *physicalAssetClassDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p physicalAssetClassDo) Where(conds ...gen.Condition) *physicalAssetClassDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p physicalAssetClassDo) Order(conds ...field.Expr) *physicalAssetClassDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p physicalAssetClassDo) Distinct(cols ...field.Expr) *physicalAssetClassDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p physicalAssetClassDo) Omit(cols ...field.Expr) *physicalAssetClassDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p physicalAssetClassDo) Join(table schema.Tabler, on ...field.Expr) *physicalAssetClassDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p physicalAssetClassDo) LeftJoin(table schema.Tabler, on ...field.Expr) *physicalAssetClassDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p physicalAssetClassDo) RightJoin(table schema.Tabler, on ...field.Expr) *physicalAssetClassDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p physicalAssetClassDo) Group(cols ...field.Expr) *physicalAssetClassDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p physicalAssetClassDo) Having(conds ...gen.Condition) *physicalAssetClassDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p physicalAssetClassDo) Limit(limit int) *physicalAssetClassDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p physicalAssetClassDo) Offset(offset int) *physicalAssetClassDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p physicalAssetClassDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *physicalAssetClassDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p physicalAssetClassDo) Unscoped() *physicalAssetClassDo {
	return p.withDO(p.DO.Unscoped())
}

func (p physicalAssetClassDo) Create(values ...*isa95.PhysicalAssetClass) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p physicalAssetClassDo) CreateInBatches(values []*isa95.PhysicalAssetClass, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p physicalAssetClassDo) Save(values ...*isa95.PhysicalAssetClass) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p physicalAssetClassDo) First() (*isa95.PhysicalAssetClass, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetClass), nil
	}
}

func (p physicalAssetClassDo) Take() (*isa95.PhysicalAssetClass, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetClass), nil
	}
}

func (p physicalAssetClassDo) Last() (*isa95.PhysicalAssetClass, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetClass), nil
	}
}

func (p physicalAssetClassDo) Find() ([]*isa95.PhysicalAssetClass, error) {
	result, err := p.DO.Find()
	return result.([]*isa95.PhysicalAssetClass), err
}

func (p physicalAssetClassDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.PhysicalAssetClass, err error) {
	buf := make([]*isa95.PhysicalAssetClass, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p physicalAssetClassDo) FindInBatches(result *[]*isa95.PhysicalAssetClass, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p physicalAssetClassDo) Attrs(attrs ...field.AssignExpr) *physicalAssetClassDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p physicalAssetClassDo) Assign(attrs ...field.AssignExpr) *physicalAssetClassDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p physicalAssetClassDo) Joins(fields ...field.RelationField) *physicalAssetClassDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p physicalAssetClassDo) Preload(fields ...field.RelationField) *physicalAssetClassDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p physicalAssetClassDo) FirstOrInit() (*isa95.PhysicalAssetClass, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetClass), nil
	}
}

func (p physicalAssetClassDo) FirstOrCreate() (*isa95.PhysicalAssetClass, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetClass), nil
	}
}

func (p physicalAssetClassDo) FindByPage(offset int, limit int) (result []*isa95.PhysicalAssetClass, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p physicalAssetClassDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p physicalAssetClassDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p physicalAssetClassDo) Delete(models ...*isa95.PhysicalAssetClass) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *physicalAssetClassDo) withDO(do gen.Dao) *physicalAssetClassDo {
	p.DO = *do.(*gen.DO)
	return p
}
