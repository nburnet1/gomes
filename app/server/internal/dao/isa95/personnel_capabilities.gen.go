// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newPersonnelCapability(db *gorm.DB, opts ...gen.DOOption) personnelCapability {
	_personnelCapability := personnelCapability{}

	_personnelCapability.personnelCapabilityDo.UseDB(db, opts...)
	_personnelCapability.personnelCapabilityDo.UseModel(&isa95.PersonnelCapability{})

	tableName := _personnelCapability.personnelCapabilityDo.TableName()
	_personnelCapability.ALL = field.NewAsterisk(tableName)
	_personnelCapability.ID = field.NewUint(tableName, "id")
	_personnelCapability.CreatedAt = field.NewTime(tableName, "created_at")
	_personnelCapability.UpdatedAt = field.NewTime(tableName, "updated_at")
	_personnelCapability.DeletedAt = field.NewField(tableName, "deleted_at")
	_personnelCapability.PersonnelClassID = field.NewUint(tableName, "personnel_class_id")
	_personnelCapability.PersonID = field.NewUint(tableName, "person_id")
	_personnelCapability.Description = field.NewString(tableName, "description")
	_personnelCapability.CapabilityType = field.NewString(tableName, "capability_type")
	_personnelCapability.Reason = field.NewString(tableName, "reason")
	_personnelCapability.ConfidenceFactor = field.NewString(tableName, "confidence_factor")
	_personnelCapability.LevelID = field.NewUint(tableName, "level_id")
	_personnelCapability.UseID = field.NewUint(tableName, "use_id")
	_personnelCapability.StartTime = field.NewTime(tableName, "start_time")
	_personnelCapability.EndTime = field.NewTime(tableName, "end_time")
	_personnelCapability.Quantity = field.NewString(tableName, "quantity")
	_personnelCapability.MeasurementID = field.NewUint(tableName, "measurement_id")
	_personnelCapability.Measurement = personnelCapabilityBelongsToMeasurement{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Measurement", "isa95.Measurement"),
	}

	_personnelCapability.fillFieldMap()

	return _personnelCapability
}

type personnelCapability struct {
	personnelCapabilityDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	PersonnelClassID field.Uint
	PersonID         field.Uint
	Description      field.String
	CapabilityType   field.String
	Reason           field.String
	ConfidenceFactor field.String
	LevelID          field.Uint
	UseID            field.Uint
	StartTime        field.Time
	EndTime          field.Time
	Quantity         field.String
	MeasurementID    field.Uint
	Measurement      personnelCapabilityBelongsToMeasurement

	fieldMap map[string]field.Expr
}

func (p personnelCapability) Table(newTableName string) *personnelCapability {
	p.personnelCapabilityDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p personnelCapability) As(alias string) *personnelCapability {
	p.personnelCapabilityDo.DO = *(p.personnelCapabilityDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *personnelCapability) updateTableName(table string) *personnelCapability {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PersonnelClassID = field.NewUint(table, "personnel_class_id")
	p.PersonID = field.NewUint(table, "person_id")
	p.Description = field.NewString(table, "description")
	p.CapabilityType = field.NewString(table, "capability_type")
	p.Reason = field.NewString(table, "reason")
	p.ConfidenceFactor = field.NewString(table, "confidence_factor")
	p.LevelID = field.NewUint(table, "level_id")
	p.UseID = field.NewUint(table, "use_id")
	p.StartTime = field.NewTime(table, "start_time")
	p.EndTime = field.NewTime(table, "end_time")
	p.Quantity = field.NewString(table, "quantity")
	p.MeasurementID = field.NewUint(table, "measurement_id")

	p.fillFieldMap()

	return p
}

func (p *personnelCapability) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *personnelCapability) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 17)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["personnel_class_id"] = p.PersonnelClassID
	p.fieldMap["person_id"] = p.PersonID
	p.fieldMap["description"] = p.Description
	p.fieldMap["capability_type"] = p.CapabilityType
	p.fieldMap["reason"] = p.Reason
	p.fieldMap["confidence_factor"] = p.ConfidenceFactor
	p.fieldMap["level_id"] = p.LevelID
	p.fieldMap["use_id"] = p.UseID
	p.fieldMap["start_time"] = p.StartTime
	p.fieldMap["end_time"] = p.EndTime
	p.fieldMap["quantity"] = p.Quantity
	p.fieldMap["measurement_id"] = p.MeasurementID

}

func (p personnelCapability) clone(db *gorm.DB) personnelCapability {
	p.personnelCapabilityDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p personnelCapability) replaceDB(db *gorm.DB) personnelCapability {
	p.personnelCapabilityDo.ReplaceDB(db)
	return p
}

type personnelCapabilityBelongsToMeasurement struct {
	db *gorm.DB

	field.RelationField
}

func (a personnelCapabilityBelongsToMeasurement) Where(conds ...field.Expr) *personnelCapabilityBelongsToMeasurement {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a personnelCapabilityBelongsToMeasurement) WithContext(ctx context.Context) *personnelCapabilityBelongsToMeasurement {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a personnelCapabilityBelongsToMeasurement) Session(session *gorm.Session) *personnelCapabilityBelongsToMeasurement {
	a.db = a.db.Session(session)
	return &a
}

func (a personnelCapabilityBelongsToMeasurement) Model(m *isa95.PersonnelCapability) *personnelCapabilityBelongsToMeasurementTx {
	return &personnelCapabilityBelongsToMeasurementTx{a.db.Model(m).Association(a.Name())}
}

type personnelCapabilityBelongsToMeasurementTx struct{ tx *gorm.Association }

func (a personnelCapabilityBelongsToMeasurementTx) Find() (result *isa95.Measurement, err error) {
	return result, a.tx.Find(&result)
}

func (a personnelCapabilityBelongsToMeasurementTx) Append(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a personnelCapabilityBelongsToMeasurementTx) Replace(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a personnelCapabilityBelongsToMeasurementTx) Delete(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a personnelCapabilityBelongsToMeasurementTx) Clear() error {
	return a.tx.Clear()
}

func (a personnelCapabilityBelongsToMeasurementTx) Count() int64 {
	return a.tx.Count()
}

type personnelCapabilityDo struct{ gen.DO }

func (p personnelCapabilityDo) Debug() *personnelCapabilityDo {
	return p.withDO(p.DO.Debug())
}

func (p personnelCapabilityDo) WithContext(ctx context.Context) *personnelCapabilityDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p personnelCapabilityDo) ReadDB() *personnelCapabilityDo {
	return p.Clauses(dbresolver.Read)
}

func (p personnelCapabilityDo) WriteDB() *personnelCapabilityDo {
	return p.Clauses(dbresolver.Write)
}

func (p personnelCapabilityDo) Session(config *gorm.Session) *personnelCapabilityDo {
	return p.withDO(p.DO.Session(config))
}

func (p personnelCapabilityDo) Clauses(conds ...clause.Expression) *personnelCapabilityDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p personnelCapabilityDo) Returning(value interface{}, columns ...string) *personnelCapabilityDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p personnelCapabilityDo) Not(conds ...gen.Condition) *personnelCapabilityDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p personnelCapabilityDo) Or(conds ...gen.Condition) *personnelCapabilityDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p personnelCapabilityDo) Select(conds ...field.Expr) *personnelCapabilityDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p personnelCapabilityDo) Where(conds ...gen.Condition) *personnelCapabilityDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p personnelCapabilityDo) Order(conds ...field.Expr) *personnelCapabilityDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p personnelCapabilityDo) Distinct(cols ...field.Expr) *personnelCapabilityDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p personnelCapabilityDo) Omit(cols ...field.Expr) *personnelCapabilityDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p personnelCapabilityDo) Join(table schema.Tabler, on ...field.Expr) *personnelCapabilityDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p personnelCapabilityDo) LeftJoin(table schema.Tabler, on ...field.Expr) *personnelCapabilityDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p personnelCapabilityDo) RightJoin(table schema.Tabler, on ...field.Expr) *personnelCapabilityDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p personnelCapabilityDo) Group(cols ...field.Expr) *personnelCapabilityDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p personnelCapabilityDo) Having(conds ...gen.Condition) *personnelCapabilityDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p personnelCapabilityDo) Limit(limit int) *personnelCapabilityDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p personnelCapabilityDo) Offset(offset int) *personnelCapabilityDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p personnelCapabilityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *personnelCapabilityDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p personnelCapabilityDo) Unscoped() *personnelCapabilityDo {
	return p.withDO(p.DO.Unscoped())
}

func (p personnelCapabilityDo) Create(values ...*isa95.PersonnelCapability) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p personnelCapabilityDo) CreateInBatches(values []*isa95.PersonnelCapability, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p personnelCapabilityDo) Save(values ...*isa95.PersonnelCapability) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p personnelCapabilityDo) First() (*isa95.PersonnelCapability, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelCapability), nil
	}
}

func (p personnelCapabilityDo) Take() (*isa95.PersonnelCapability, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelCapability), nil
	}
}

func (p personnelCapabilityDo) Last() (*isa95.PersonnelCapability, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelCapability), nil
	}
}

func (p personnelCapabilityDo) Find() ([]*isa95.PersonnelCapability, error) {
	result, err := p.DO.Find()
	return result.([]*isa95.PersonnelCapability), err
}

func (p personnelCapabilityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.PersonnelCapability, err error) {
	buf := make([]*isa95.PersonnelCapability, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p personnelCapabilityDo) FindInBatches(result *[]*isa95.PersonnelCapability, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p personnelCapabilityDo) Attrs(attrs ...field.AssignExpr) *personnelCapabilityDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p personnelCapabilityDo) Assign(attrs ...field.AssignExpr) *personnelCapabilityDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p personnelCapabilityDo) Joins(fields ...field.RelationField) *personnelCapabilityDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p personnelCapabilityDo) Preload(fields ...field.RelationField) *personnelCapabilityDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p personnelCapabilityDo) FirstOrInit() (*isa95.PersonnelCapability, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelCapability), nil
	}
}

func (p personnelCapabilityDo) FirstOrCreate() (*isa95.PersonnelCapability, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelCapability), nil
	}
}

func (p personnelCapabilityDo) FindByPage(offset int, limit int) (result []*isa95.PersonnelCapability, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p personnelCapabilityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p personnelCapabilityDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p personnelCapabilityDo) Delete(models ...*isa95.PersonnelCapability) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *personnelCapabilityDo) withDO(do gen.Dao) *personnelCapabilityDo {
	p.DO = *do.(*gen.DO)
	return p
}
