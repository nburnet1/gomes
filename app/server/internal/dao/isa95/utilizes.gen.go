// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newUtilize(db *gorm.DB, opts ...gen.DOOption) utilize {
	_utilize := utilize{}

	_utilize.utilizeDo.UseDB(db, opts...)
	_utilize.utilizeDo.UseModel(&isa95.Utilize{})

	tableName := _utilize.utilizeDo.TableName()
	_utilize.ALL = field.NewAsterisk(tableName)
	_utilize.ID = field.NewUint(tableName, "id")
	_utilize.CreatedAt = field.NewTime(tableName, "created_at")
	_utilize.UpdatedAt = field.NewTime(tableName, "updated_at")
	_utilize.DeletedAt = field.NewField(tableName, "deleted_at")
	_utilize.Code = field.NewString(tableName, "code")
	_utilize.Description = field.NewString(tableName, "description")
	_utilize.UseCategoryID = field.NewUint(tableName, "use_category_id")

	_utilize.fillFieldMap()

	return _utilize
}

type utilize struct {
	utilizeDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Code          field.String
	Description   field.String
	UseCategoryID field.Uint

	fieldMap map[string]field.Expr
}

func (u utilize) Table(newTableName string) *utilize {
	u.utilizeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u utilize) As(alias string) *utilize {
	u.utilizeDo.DO = *(u.utilizeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *utilize) updateTableName(table string) *utilize {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Code = field.NewString(table, "code")
	u.Description = field.NewString(table, "description")
	u.UseCategoryID = field.NewUint(table, "use_category_id")

	u.fillFieldMap()

	return u
}

func (u *utilize) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *utilize) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["code"] = u.Code
	u.fieldMap["description"] = u.Description
	u.fieldMap["use_category_id"] = u.UseCategoryID
}

func (u utilize) clone(db *gorm.DB) utilize {
	u.utilizeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u utilize) replaceDB(db *gorm.DB) utilize {
	u.utilizeDo.ReplaceDB(db)
	return u
}

type utilizeDo struct{ gen.DO }

func (u utilizeDo) Debug() *utilizeDo {
	return u.withDO(u.DO.Debug())
}

func (u utilizeDo) WithContext(ctx context.Context) *utilizeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u utilizeDo) ReadDB() *utilizeDo {
	return u.Clauses(dbresolver.Read)
}

func (u utilizeDo) WriteDB() *utilizeDo {
	return u.Clauses(dbresolver.Write)
}

func (u utilizeDo) Session(config *gorm.Session) *utilizeDo {
	return u.withDO(u.DO.Session(config))
}

func (u utilizeDo) Clauses(conds ...clause.Expression) *utilizeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u utilizeDo) Returning(value interface{}, columns ...string) *utilizeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u utilizeDo) Not(conds ...gen.Condition) *utilizeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u utilizeDo) Or(conds ...gen.Condition) *utilizeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u utilizeDo) Select(conds ...field.Expr) *utilizeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u utilizeDo) Where(conds ...gen.Condition) *utilizeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u utilizeDo) Order(conds ...field.Expr) *utilizeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u utilizeDo) Distinct(cols ...field.Expr) *utilizeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u utilizeDo) Omit(cols ...field.Expr) *utilizeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u utilizeDo) Join(table schema.Tabler, on ...field.Expr) *utilizeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u utilizeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *utilizeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u utilizeDo) RightJoin(table schema.Tabler, on ...field.Expr) *utilizeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u utilizeDo) Group(cols ...field.Expr) *utilizeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u utilizeDo) Having(conds ...gen.Condition) *utilizeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u utilizeDo) Limit(limit int) *utilizeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u utilizeDo) Offset(offset int) *utilizeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u utilizeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *utilizeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u utilizeDo) Unscoped() *utilizeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u utilizeDo) Create(values ...*isa95.Utilize) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u utilizeDo) CreateInBatches(values []*isa95.Utilize, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u utilizeDo) Save(values ...*isa95.Utilize) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u utilizeDo) First() (*isa95.Utilize, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.Utilize), nil
	}
}

func (u utilizeDo) Take() (*isa95.Utilize, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.Utilize), nil
	}
}

func (u utilizeDo) Last() (*isa95.Utilize, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.Utilize), nil
	}
}

func (u utilizeDo) Find() ([]*isa95.Utilize, error) {
	result, err := u.DO.Find()
	return result.([]*isa95.Utilize), err
}

func (u utilizeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.Utilize, err error) {
	buf := make([]*isa95.Utilize, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u utilizeDo) FindInBatches(result *[]*isa95.Utilize, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u utilizeDo) Attrs(attrs ...field.AssignExpr) *utilizeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u utilizeDo) Assign(attrs ...field.AssignExpr) *utilizeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u utilizeDo) Joins(fields ...field.RelationField) *utilizeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u utilizeDo) Preload(fields ...field.RelationField) *utilizeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u utilizeDo) FirstOrInit() (*isa95.Utilize, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.Utilize), nil
	}
}

func (u utilizeDo) FirstOrCreate() (*isa95.Utilize, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.Utilize), nil
	}
}

func (u utilizeDo) FindByPage(offset int, limit int) (result []*isa95.Utilize, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u utilizeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u utilizeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u utilizeDo) Delete(models ...*isa95.Utilize) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *utilizeDo) withDO(do gen.Dao) *utilizeDo {
	u.DO = *do.(*gen.DO)
	return u
}
