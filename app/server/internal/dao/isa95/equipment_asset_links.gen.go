// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newEquipmentAssetLink(db *gorm.DB, opts ...gen.DOOption) equipmentAssetLink {
	_equipmentAssetLink := equipmentAssetLink{}

	_equipmentAssetLink.equipmentAssetLinkDo.UseDB(db, opts...)
	_equipmentAssetLink.equipmentAssetLinkDo.UseModel(&isa95.EquipmentAssetLink{})

	tableName := _equipmentAssetLink.equipmentAssetLinkDo.TableName()
	_equipmentAssetLink.ALL = field.NewAsterisk(tableName)
	_equipmentAssetLink.ID = field.NewUint(tableName, "id")
	_equipmentAssetLink.CreatedAt = field.NewTime(tableName, "created_at")
	_equipmentAssetLink.UpdatedAt = field.NewTime(tableName, "updated_at")
	_equipmentAssetLink.DeletedAt = field.NewField(tableName, "deleted_at")
	_equipmentAssetLink.Description = field.NewString(tableName, "description")
	_equipmentAssetLink.StartTime = field.NewTime(tableName, "start_time")
	_equipmentAssetLink.EndTime = field.NewTime(tableName, "end_time")
	_equipmentAssetLink.EquipmentID = field.NewUint(tableName, "equipment_id")
	_equipmentAssetLink.PhysicalAssetID = field.NewUint(tableName, "physical_asset_id")
	_equipmentAssetLink.Equipment = equipmentAssetLinkBelongsToEquipment{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Equipment", "isa95.Equipment"),
		Level: struct {
			field.RelationField
			LevelLookup struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Equipment.Level", "isa95.Level"),
			LevelLookup: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Equipment.Level.LevelLookup", "isa95.LevelLookup"),
			},
		},
	}

	_equipmentAssetLink.PhysicalAsset = equipmentAssetLinkBelongsToPhysicalAsset{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PhysicalAsset", "isa95.PhysicalAsset"),
		PhysicalAssetClass: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("PhysicalAsset.PhysicalAssetClass", "isa95.PhysicalAssetClass"),
		},
	}

	_equipmentAssetLink.fillFieldMap()

	return _equipmentAssetLink
}

type equipmentAssetLink struct {
	equipmentAssetLinkDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	Description     field.String
	StartTime       field.Time
	EndTime         field.Time
	EquipmentID     field.Uint
	PhysicalAssetID field.Uint
	Equipment       equipmentAssetLinkBelongsToEquipment

	PhysicalAsset equipmentAssetLinkBelongsToPhysicalAsset

	fieldMap map[string]field.Expr
}

func (e equipmentAssetLink) Table(newTableName string) *equipmentAssetLink {
	e.equipmentAssetLinkDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e equipmentAssetLink) As(alias string) *equipmentAssetLink {
	e.equipmentAssetLinkDo.DO = *(e.equipmentAssetLinkDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *equipmentAssetLink) updateTableName(table string) *equipmentAssetLink {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewUint(table, "id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.Description = field.NewString(table, "description")
	e.StartTime = field.NewTime(table, "start_time")
	e.EndTime = field.NewTime(table, "end_time")
	e.EquipmentID = field.NewUint(table, "equipment_id")
	e.PhysicalAssetID = field.NewUint(table, "physical_asset_id")

	e.fillFieldMap()

	return e
}

func (e *equipmentAssetLink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *equipmentAssetLink) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 11)
	e.fieldMap["id"] = e.ID
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["description"] = e.Description
	e.fieldMap["start_time"] = e.StartTime
	e.fieldMap["end_time"] = e.EndTime
	e.fieldMap["equipment_id"] = e.EquipmentID
	e.fieldMap["physical_asset_id"] = e.PhysicalAssetID

}

func (e equipmentAssetLink) clone(db *gorm.DB) equipmentAssetLink {
	e.equipmentAssetLinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e equipmentAssetLink) replaceDB(db *gorm.DB) equipmentAssetLink {
	e.equipmentAssetLinkDo.ReplaceDB(db)
	return e
}

type equipmentAssetLinkBelongsToEquipment struct {
	db *gorm.DB

	field.RelationField

	Level struct {
		field.RelationField
		LevelLookup struct {
			field.RelationField
		}
	}
}

func (a equipmentAssetLinkBelongsToEquipment) Where(conds ...field.Expr) *equipmentAssetLinkBelongsToEquipment {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a equipmentAssetLinkBelongsToEquipment) WithContext(ctx context.Context) *equipmentAssetLinkBelongsToEquipment {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a equipmentAssetLinkBelongsToEquipment) Session(session *gorm.Session) *equipmentAssetLinkBelongsToEquipment {
	a.db = a.db.Session(session)
	return &a
}

func (a equipmentAssetLinkBelongsToEquipment) Model(m *isa95.EquipmentAssetLink) *equipmentAssetLinkBelongsToEquipmentTx {
	return &equipmentAssetLinkBelongsToEquipmentTx{a.db.Model(m).Association(a.Name())}
}

type equipmentAssetLinkBelongsToEquipmentTx struct{ tx *gorm.Association }

func (a equipmentAssetLinkBelongsToEquipmentTx) Find() (result *isa95.Equipment, err error) {
	return result, a.tx.Find(&result)
}

func (a equipmentAssetLinkBelongsToEquipmentTx) Append(values ...*isa95.Equipment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a equipmentAssetLinkBelongsToEquipmentTx) Replace(values ...*isa95.Equipment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a equipmentAssetLinkBelongsToEquipmentTx) Delete(values ...*isa95.Equipment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a equipmentAssetLinkBelongsToEquipmentTx) Clear() error {
	return a.tx.Clear()
}

func (a equipmentAssetLinkBelongsToEquipmentTx) Count() int64 {
	return a.tx.Count()
}

type equipmentAssetLinkBelongsToPhysicalAsset struct {
	db *gorm.DB

	field.RelationField

	PhysicalAssetClass struct {
		field.RelationField
	}
}

func (a equipmentAssetLinkBelongsToPhysicalAsset) Where(conds ...field.Expr) *equipmentAssetLinkBelongsToPhysicalAsset {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a equipmentAssetLinkBelongsToPhysicalAsset) WithContext(ctx context.Context) *equipmentAssetLinkBelongsToPhysicalAsset {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a equipmentAssetLinkBelongsToPhysicalAsset) Session(session *gorm.Session) *equipmentAssetLinkBelongsToPhysicalAsset {
	a.db = a.db.Session(session)
	return &a
}

func (a equipmentAssetLinkBelongsToPhysicalAsset) Model(m *isa95.EquipmentAssetLink) *equipmentAssetLinkBelongsToPhysicalAssetTx {
	return &equipmentAssetLinkBelongsToPhysicalAssetTx{a.db.Model(m).Association(a.Name())}
}

type equipmentAssetLinkBelongsToPhysicalAssetTx struct{ tx *gorm.Association }

func (a equipmentAssetLinkBelongsToPhysicalAssetTx) Find() (result *isa95.PhysicalAsset, err error) {
	return result, a.tx.Find(&result)
}

func (a equipmentAssetLinkBelongsToPhysicalAssetTx) Append(values ...*isa95.PhysicalAsset) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a equipmentAssetLinkBelongsToPhysicalAssetTx) Replace(values ...*isa95.PhysicalAsset) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a equipmentAssetLinkBelongsToPhysicalAssetTx) Delete(values ...*isa95.PhysicalAsset) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a equipmentAssetLinkBelongsToPhysicalAssetTx) Clear() error {
	return a.tx.Clear()
}

func (a equipmentAssetLinkBelongsToPhysicalAssetTx) Count() int64 {
	return a.tx.Count()
}

type equipmentAssetLinkDo struct{ gen.DO }

func (e equipmentAssetLinkDo) Debug() *equipmentAssetLinkDo {
	return e.withDO(e.DO.Debug())
}

func (e equipmentAssetLinkDo) WithContext(ctx context.Context) *equipmentAssetLinkDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e equipmentAssetLinkDo) ReadDB() *equipmentAssetLinkDo {
	return e.Clauses(dbresolver.Read)
}

func (e equipmentAssetLinkDo) WriteDB() *equipmentAssetLinkDo {
	return e.Clauses(dbresolver.Write)
}

func (e equipmentAssetLinkDo) Session(config *gorm.Session) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Session(config))
}

func (e equipmentAssetLinkDo) Clauses(conds ...clause.Expression) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e equipmentAssetLinkDo) Returning(value interface{}, columns ...string) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e equipmentAssetLinkDo) Not(conds ...gen.Condition) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e equipmentAssetLinkDo) Or(conds ...gen.Condition) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e equipmentAssetLinkDo) Select(conds ...field.Expr) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e equipmentAssetLinkDo) Where(conds ...gen.Condition) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e equipmentAssetLinkDo) Order(conds ...field.Expr) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e equipmentAssetLinkDo) Distinct(cols ...field.Expr) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e equipmentAssetLinkDo) Omit(cols ...field.Expr) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e equipmentAssetLinkDo) Join(table schema.Tabler, on ...field.Expr) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e equipmentAssetLinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) *equipmentAssetLinkDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e equipmentAssetLinkDo) RightJoin(table schema.Tabler, on ...field.Expr) *equipmentAssetLinkDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e equipmentAssetLinkDo) Group(cols ...field.Expr) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e equipmentAssetLinkDo) Having(conds ...gen.Condition) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e equipmentAssetLinkDo) Limit(limit int) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e equipmentAssetLinkDo) Offset(offset int) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e equipmentAssetLinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e equipmentAssetLinkDo) Unscoped() *equipmentAssetLinkDo {
	return e.withDO(e.DO.Unscoped())
}

func (e equipmentAssetLinkDo) Create(values ...*isa95.EquipmentAssetLink) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e equipmentAssetLinkDo) CreateInBatches(values []*isa95.EquipmentAssetLink, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e equipmentAssetLinkDo) Save(values ...*isa95.EquipmentAssetLink) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e equipmentAssetLinkDo) First() (*isa95.EquipmentAssetLink, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentAssetLink), nil
	}
}

func (e equipmentAssetLinkDo) Take() (*isa95.EquipmentAssetLink, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentAssetLink), nil
	}
}

func (e equipmentAssetLinkDo) Last() (*isa95.EquipmentAssetLink, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentAssetLink), nil
	}
}

func (e equipmentAssetLinkDo) Find() ([]*isa95.EquipmentAssetLink, error) {
	result, err := e.DO.Find()
	return result.([]*isa95.EquipmentAssetLink), err
}

func (e equipmentAssetLinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.EquipmentAssetLink, err error) {
	buf := make([]*isa95.EquipmentAssetLink, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e equipmentAssetLinkDo) FindInBatches(result *[]*isa95.EquipmentAssetLink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e equipmentAssetLinkDo) Attrs(attrs ...field.AssignExpr) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e equipmentAssetLinkDo) Assign(attrs ...field.AssignExpr) *equipmentAssetLinkDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e equipmentAssetLinkDo) Joins(fields ...field.RelationField) *equipmentAssetLinkDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e equipmentAssetLinkDo) Preload(fields ...field.RelationField) *equipmentAssetLinkDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e equipmentAssetLinkDo) FirstOrInit() (*isa95.EquipmentAssetLink, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentAssetLink), nil
	}
}

func (e equipmentAssetLinkDo) FirstOrCreate() (*isa95.EquipmentAssetLink, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentAssetLink), nil
	}
}

func (e equipmentAssetLinkDo) FindByPage(offset int, limit int) (result []*isa95.EquipmentAssetLink, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e equipmentAssetLinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e equipmentAssetLinkDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e equipmentAssetLinkDo) Delete(models ...*isa95.EquipmentAssetLink) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *equipmentAssetLinkDo) withDO(do gen.Dao) *equipmentAssetLinkDo {
	e.DO = *do.(*gen.DO)
	return e
}
