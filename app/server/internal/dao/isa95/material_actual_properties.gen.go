// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newMaterialActualProperty(db *gorm.DB, opts ...gen.DOOption) materialActualProperty {
	_materialActualProperty := materialActualProperty{}

	_materialActualProperty.materialActualPropertyDo.UseDB(db, opts...)
	_materialActualProperty.materialActualPropertyDo.UseModel(&isa95.MaterialActualProperty{})

	tableName := _materialActualProperty.materialActualPropertyDo.TableName()
	_materialActualProperty.ALL = field.NewAsterisk(tableName)
	_materialActualProperty.ID = field.NewUint(tableName, "id")
	_materialActualProperty.CreatedAt = field.NewTime(tableName, "created_at")
	_materialActualProperty.UpdatedAt = field.NewTime(tableName, "updated_at")
	_materialActualProperty.DeletedAt = field.NewField(tableName, "deleted_at")

	_materialActualProperty.fillFieldMap()

	return _materialActualProperty
}

type materialActualProperty struct {
	materialActualPropertyDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (m materialActualProperty) Table(newTableName string) *materialActualProperty {
	m.materialActualPropertyDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m materialActualProperty) As(alias string) *materialActualProperty {
	m.materialActualPropertyDo.DO = *(m.materialActualPropertyDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *materialActualProperty) updateTableName(table string) *materialActualProperty {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *materialActualProperty) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *materialActualProperty) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m materialActualProperty) clone(db *gorm.DB) materialActualProperty {
	m.materialActualPropertyDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m materialActualProperty) replaceDB(db *gorm.DB) materialActualProperty {
	m.materialActualPropertyDo.ReplaceDB(db)
	return m
}

type materialActualPropertyDo struct{ gen.DO }

func (m materialActualPropertyDo) Debug() *materialActualPropertyDo {
	return m.withDO(m.DO.Debug())
}

func (m materialActualPropertyDo) WithContext(ctx context.Context) *materialActualPropertyDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m materialActualPropertyDo) ReadDB() *materialActualPropertyDo {
	return m.Clauses(dbresolver.Read)
}

func (m materialActualPropertyDo) WriteDB() *materialActualPropertyDo {
	return m.Clauses(dbresolver.Write)
}

func (m materialActualPropertyDo) Session(config *gorm.Session) *materialActualPropertyDo {
	return m.withDO(m.DO.Session(config))
}

func (m materialActualPropertyDo) Clauses(conds ...clause.Expression) *materialActualPropertyDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m materialActualPropertyDo) Returning(value interface{}, columns ...string) *materialActualPropertyDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m materialActualPropertyDo) Not(conds ...gen.Condition) *materialActualPropertyDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m materialActualPropertyDo) Or(conds ...gen.Condition) *materialActualPropertyDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m materialActualPropertyDo) Select(conds ...field.Expr) *materialActualPropertyDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m materialActualPropertyDo) Where(conds ...gen.Condition) *materialActualPropertyDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m materialActualPropertyDo) Order(conds ...field.Expr) *materialActualPropertyDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m materialActualPropertyDo) Distinct(cols ...field.Expr) *materialActualPropertyDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m materialActualPropertyDo) Omit(cols ...field.Expr) *materialActualPropertyDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m materialActualPropertyDo) Join(table schema.Tabler, on ...field.Expr) *materialActualPropertyDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m materialActualPropertyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *materialActualPropertyDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m materialActualPropertyDo) RightJoin(table schema.Tabler, on ...field.Expr) *materialActualPropertyDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m materialActualPropertyDo) Group(cols ...field.Expr) *materialActualPropertyDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m materialActualPropertyDo) Having(conds ...gen.Condition) *materialActualPropertyDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m materialActualPropertyDo) Limit(limit int) *materialActualPropertyDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m materialActualPropertyDo) Offset(offset int) *materialActualPropertyDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m materialActualPropertyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *materialActualPropertyDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m materialActualPropertyDo) Unscoped() *materialActualPropertyDo {
	return m.withDO(m.DO.Unscoped())
}

func (m materialActualPropertyDo) Create(values ...*isa95.MaterialActualProperty) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m materialActualPropertyDo) CreateInBatches(values []*isa95.MaterialActualProperty, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m materialActualPropertyDo) Save(values ...*isa95.MaterialActualProperty) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m materialActualPropertyDo) First() (*isa95.MaterialActualProperty, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialActualProperty), nil
	}
}

func (m materialActualPropertyDo) Take() (*isa95.MaterialActualProperty, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialActualProperty), nil
	}
}

func (m materialActualPropertyDo) Last() (*isa95.MaterialActualProperty, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialActualProperty), nil
	}
}

func (m materialActualPropertyDo) Find() ([]*isa95.MaterialActualProperty, error) {
	result, err := m.DO.Find()
	return result.([]*isa95.MaterialActualProperty), err
}

func (m materialActualPropertyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.MaterialActualProperty, err error) {
	buf := make([]*isa95.MaterialActualProperty, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m materialActualPropertyDo) FindInBatches(result *[]*isa95.MaterialActualProperty, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m materialActualPropertyDo) Attrs(attrs ...field.AssignExpr) *materialActualPropertyDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m materialActualPropertyDo) Assign(attrs ...field.AssignExpr) *materialActualPropertyDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m materialActualPropertyDo) Joins(fields ...field.RelationField) *materialActualPropertyDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m materialActualPropertyDo) Preload(fields ...field.RelationField) *materialActualPropertyDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m materialActualPropertyDo) FirstOrInit() (*isa95.MaterialActualProperty, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialActualProperty), nil
	}
}

func (m materialActualPropertyDo) FirstOrCreate() (*isa95.MaterialActualProperty, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialActualProperty), nil
	}
}

func (m materialActualPropertyDo) FindByPage(offset int, limit int) (result []*isa95.MaterialActualProperty, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m materialActualPropertyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m materialActualPropertyDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m materialActualPropertyDo) Delete(models ...*isa95.MaterialActualProperty) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *materialActualPropertyDo) withDO(do gen.Dao) *materialActualPropertyDo {
	m.DO = *do.(*gen.DO)
	return m
}
