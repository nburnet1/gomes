// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newEquipmentCapabilityTest(db *gorm.DB, opts ...gen.DOOption) equipmentCapabilityTest {
	_equipmentCapabilityTest := equipmentCapabilityTest{}

	_equipmentCapabilityTest.equipmentCapabilityTestDo.UseDB(db, opts...)
	_equipmentCapabilityTest.equipmentCapabilityTestDo.UseModel(&isa95.EquipmentCapabilityTest{})

	tableName := _equipmentCapabilityTest.equipmentCapabilityTestDo.TableName()
	_equipmentCapabilityTest.ALL = field.NewAsterisk(tableName)
	_equipmentCapabilityTest.ID = field.NewUint(tableName, "id")
	_equipmentCapabilityTest.CreatedAt = field.NewTime(tableName, "created_at")
	_equipmentCapabilityTest.UpdatedAt = field.NewTime(tableName, "updated_at")
	_equipmentCapabilityTest.DeletedAt = field.NewField(tableName, "deleted_at")
	_equipmentCapabilityTest.Description = field.NewString(tableName, "description")
	_equipmentCapabilityTest.Version = field.NewString(tableName, "version")
	_equipmentCapabilityTest.EquipmentID = field.NewUint(tableName, "equipment_id")

	_equipmentCapabilityTest.fillFieldMap()

	return _equipmentCapabilityTest
}

type equipmentCapabilityTest struct {
	equipmentCapabilityTestDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Description field.String
	Version     field.String
	EquipmentID field.Uint

	fieldMap map[string]field.Expr
}

func (e equipmentCapabilityTest) Table(newTableName string) *equipmentCapabilityTest {
	e.equipmentCapabilityTestDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e equipmentCapabilityTest) As(alias string) *equipmentCapabilityTest {
	e.equipmentCapabilityTestDo.DO = *(e.equipmentCapabilityTestDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *equipmentCapabilityTest) updateTableName(table string) *equipmentCapabilityTest {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewUint(table, "id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.Description = field.NewString(table, "description")
	e.Version = field.NewString(table, "version")
	e.EquipmentID = field.NewUint(table, "equipment_id")

	e.fillFieldMap()

	return e
}

func (e *equipmentCapabilityTest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *equipmentCapabilityTest) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["description"] = e.Description
	e.fieldMap["version"] = e.Version
	e.fieldMap["equipment_id"] = e.EquipmentID
}

func (e equipmentCapabilityTest) clone(db *gorm.DB) equipmentCapabilityTest {
	e.equipmentCapabilityTestDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e equipmentCapabilityTest) replaceDB(db *gorm.DB) equipmentCapabilityTest {
	e.equipmentCapabilityTestDo.ReplaceDB(db)
	return e
}

type equipmentCapabilityTestDo struct{ gen.DO }

func (e equipmentCapabilityTestDo) Debug() *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Debug())
}

func (e equipmentCapabilityTestDo) WithContext(ctx context.Context) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e equipmentCapabilityTestDo) ReadDB() *equipmentCapabilityTestDo {
	return e.Clauses(dbresolver.Read)
}

func (e equipmentCapabilityTestDo) WriteDB() *equipmentCapabilityTestDo {
	return e.Clauses(dbresolver.Write)
}

func (e equipmentCapabilityTestDo) Session(config *gorm.Session) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Session(config))
}

func (e equipmentCapabilityTestDo) Clauses(conds ...clause.Expression) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e equipmentCapabilityTestDo) Returning(value interface{}, columns ...string) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e equipmentCapabilityTestDo) Not(conds ...gen.Condition) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e equipmentCapabilityTestDo) Or(conds ...gen.Condition) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e equipmentCapabilityTestDo) Select(conds ...field.Expr) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e equipmentCapabilityTestDo) Where(conds ...gen.Condition) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e equipmentCapabilityTestDo) Order(conds ...field.Expr) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e equipmentCapabilityTestDo) Distinct(cols ...field.Expr) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e equipmentCapabilityTestDo) Omit(cols ...field.Expr) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e equipmentCapabilityTestDo) Join(table schema.Tabler, on ...field.Expr) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e equipmentCapabilityTestDo) LeftJoin(table schema.Tabler, on ...field.Expr) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e equipmentCapabilityTestDo) RightJoin(table schema.Tabler, on ...field.Expr) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e equipmentCapabilityTestDo) Group(cols ...field.Expr) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e equipmentCapabilityTestDo) Having(conds ...gen.Condition) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e equipmentCapabilityTestDo) Limit(limit int) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e equipmentCapabilityTestDo) Offset(offset int) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e equipmentCapabilityTestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e equipmentCapabilityTestDo) Unscoped() *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Unscoped())
}

func (e equipmentCapabilityTestDo) Create(values ...*isa95.EquipmentCapabilityTest) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e equipmentCapabilityTestDo) CreateInBatches(values []*isa95.EquipmentCapabilityTest, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e equipmentCapabilityTestDo) Save(values ...*isa95.EquipmentCapabilityTest) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e equipmentCapabilityTestDo) First() (*isa95.EquipmentCapabilityTest, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentCapabilityTest), nil
	}
}

func (e equipmentCapabilityTestDo) Take() (*isa95.EquipmentCapabilityTest, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentCapabilityTest), nil
	}
}

func (e equipmentCapabilityTestDo) Last() (*isa95.EquipmentCapabilityTest, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentCapabilityTest), nil
	}
}

func (e equipmentCapabilityTestDo) Find() ([]*isa95.EquipmentCapabilityTest, error) {
	result, err := e.DO.Find()
	return result.([]*isa95.EquipmentCapabilityTest), err
}

func (e equipmentCapabilityTestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.EquipmentCapabilityTest, err error) {
	buf := make([]*isa95.EquipmentCapabilityTest, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e equipmentCapabilityTestDo) FindInBatches(result *[]*isa95.EquipmentCapabilityTest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e equipmentCapabilityTestDo) Attrs(attrs ...field.AssignExpr) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e equipmentCapabilityTestDo) Assign(attrs ...field.AssignExpr) *equipmentCapabilityTestDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e equipmentCapabilityTestDo) Joins(fields ...field.RelationField) *equipmentCapabilityTestDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e equipmentCapabilityTestDo) Preload(fields ...field.RelationField) *equipmentCapabilityTestDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e equipmentCapabilityTestDo) FirstOrInit() (*isa95.EquipmentCapabilityTest, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentCapabilityTest), nil
	}
}

func (e equipmentCapabilityTestDo) FirstOrCreate() (*isa95.EquipmentCapabilityTest, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.EquipmentCapabilityTest), nil
	}
}

func (e equipmentCapabilityTestDo) FindByPage(offset int, limit int) (result []*isa95.EquipmentCapabilityTest, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e equipmentCapabilityTestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e equipmentCapabilityTestDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e equipmentCapabilityTestDo) Delete(models ...*isa95.EquipmentCapabilityTest) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *equipmentCapabilityTestDo) withDO(do gen.Dao) *equipmentCapabilityTestDo {
	e.DO = *do.(*gen.DO)
	return e
}
