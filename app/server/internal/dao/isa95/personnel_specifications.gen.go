// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newPersonnelSpecification(db *gorm.DB, opts ...gen.DOOption) personnelSpecification {
	_personnelSpecification := personnelSpecification{}

	_personnelSpecification.personnelSpecificationDo.UseDB(db, opts...)
	_personnelSpecification.personnelSpecificationDo.UseModel(&isa95.PersonnelSpecification{})

	tableName := _personnelSpecification.personnelSpecificationDo.TableName()
	_personnelSpecification.ALL = field.NewAsterisk(tableName)
	_personnelSpecification.ID = field.NewUint(tableName, "id")
	_personnelSpecification.CreatedAt = field.NewTime(tableName, "created_at")
	_personnelSpecification.UpdatedAt = field.NewTime(tableName, "updated_at")
	_personnelSpecification.DeletedAt = field.NewField(tableName, "deleted_at")
	_personnelSpecification.PersonnelClassID = field.NewUint(tableName, "personnel_class_id")
	_personnelSpecification.PersonID = field.NewUint(tableName, "person_id")
	_personnelSpecification.Description = field.NewString(tableName, "description")
	_personnelSpecification.UseID = field.NewUint(tableName, "use_id")
	_personnelSpecification.Quantity = field.NewString(tableName, "quantity")
	_personnelSpecification.MeasurementID = field.NewUint(tableName, "measurement_id")
	_personnelSpecification.Measurement = personnelSpecificationBelongsToMeasurement{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Measurement", "isa95.Measurement"),
	}

	_personnelSpecification.fillFieldMap()

	return _personnelSpecification
}

type personnelSpecification struct {
	personnelSpecificationDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	PersonnelClassID field.Uint
	PersonID         field.Uint
	Description      field.String
	UseID            field.Uint
	Quantity         field.String
	MeasurementID    field.Uint
	Measurement      personnelSpecificationBelongsToMeasurement

	fieldMap map[string]field.Expr
}

func (p personnelSpecification) Table(newTableName string) *personnelSpecification {
	p.personnelSpecificationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p personnelSpecification) As(alias string) *personnelSpecification {
	p.personnelSpecificationDo.DO = *(p.personnelSpecificationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *personnelSpecification) updateTableName(table string) *personnelSpecification {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PersonnelClassID = field.NewUint(table, "personnel_class_id")
	p.PersonID = field.NewUint(table, "person_id")
	p.Description = field.NewString(table, "description")
	p.UseID = field.NewUint(table, "use_id")
	p.Quantity = field.NewString(table, "quantity")
	p.MeasurementID = field.NewUint(table, "measurement_id")

	p.fillFieldMap()

	return p
}

func (p *personnelSpecification) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *personnelSpecification) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["personnel_class_id"] = p.PersonnelClassID
	p.fieldMap["person_id"] = p.PersonID
	p.fieldMap["description"] = p.Description
	p.fieldMap["use_id"] = p.UseID
	p.fieldMap["quantity"] = p.Quantity
	p.fieldMap["measurement_id"] = p.MeasurementID

}

func (p personnelSpecification) clone(db *gorm.DB) personnelSpecification {
	p.personnelSpecificationDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p personnelSpecification) replaceDB(db *gorm.DB) personnelSpecification {
	p.personnelSpecificationDo.ReplaceDB(db)
	return p
}

type personnelSpecificationBelongsToMeasurement struct {
	db *gorm.DB

	field.RelationField
}

func (a personnelSpecificationBelongsToMeasurement) Where(conds ...field.Expr) *personnelSpecificationBelongsToMeasurement {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a personnelSpecificationBelongsToMeasurement) WithContext(ctx context.Context) *personnelSpecificationBelongsToMeasurement {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a personnelSpecificationBelongsToMeasurement) Session(session *gorm.Session) *personnelSpecificationBelongsToMeasurement {
	a.db = a.db.Session(session)
	return &a
}

func (a personnelSpecificationBelongsToMeasurement) Model(m *isa95.PersonnelSpecification) *personnelSpecificationBelongsToMeasurementTx {
	return &personnelSpecificationBelongsToMeasurementTx{a.db.Model(m).Association(a.Name())}
}

type personnelSpecificationBelongsToMeasurementTx struct{ tx *gorm.Association }

func (a personnelSpecificationBelongsToMeasurementTx) Find() (result *isa95.Measurement, err error) {
	return result, a.tx.Find(&result)
}

func (a personnelSpecificationBelongsToMeasurementTx) Append(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a personnelSpecificationBelongsToMeasurementTx) Replace(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a personnelSpecificationBelongsToMeasurementTx) Delete(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a personnelSpecificationBelongsToMeasurementTx) Clear() error {
	return a.tx.Clear()
}

func (a personnelSpecificationBelongsToMeasurementTx) Count() int64 {
	return a.tx.Count()
}

type personnelSpecificationDo struct{ gen.DO }

func (p personnelSpecificationDo) Debug() *personnelSpecificationDo {
	return p.withDO(p.DO.Debug())
}

func (p personnelSpecificationDo) WithContext(ctx context.Context) *personnelSpecificationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p personnelSpecificationDo) ReadDB() *personnelSpecificationDo {
	return p.Clauses(dbresolver.Read)
}

func (p personnelSpecificationDo) WriteDB() *personnelSpecificationDo {
	return p.Clauses(dbresolver.Write)
}

func (p personnelSpecificationDo) Session(config *gorm.Session) *personnelSpecificationDo {
	return p.withDO(p.DO.Session(config))
}

func (p personnelSpecificationDo) Clauses(conds ...clause.Expression) *personnelSpecificationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p personnelSpecificationDo) Returning(value interface{}, columns ...string) *personnelSpecificationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p personnelSpecificationDo) Not(conds ...gen.Condition) *personnelSpecificationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p personnelSpecificationDo) Or(conds ...gen.Condition) *personnelSpecificationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p personnelSpecificationDo) Select(conds ...field.Expr) *personnelSpecificationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p personnelSpecificationDo) Where(conds ...gen.Condition) *personnelSpecificationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p personnelSpecificationDo) Order(conds ...field.Expr) *personnelSpecificationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p personnelSpecificationDo) Distinct(cols ...field.Expr) *personnelSpecificationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p personnelSpecificationDo) Omit(cols ...field.Expr) *personnelSpecificationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p personnelSpecificationDo) Join(table schema.Tabler, on ...field.Expr) *personnelSpecificationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p personnelSpecificationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *personnelSpecificationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p personnelSpecificationDo) RightJoin(table schema.Tabler, on ...field.Expr) *personnelSpecificationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p personnelSpecificationDo) Group(cols ...field.Expr) *personnelSpecificationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p personnelSpecificationDo) Having(conds ...gen.Condition) *personnelSpecificationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p personnelSpecificationDo) Limit(limit int) *personnelSpecificationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p personnelSpecificationDo) Offset(offset int) *personnelSpecificationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p personnelSpecificationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *personnelSpecificationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p personnelSpecificationDo) Unscoped() *personnelSpecificationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p personnelSpecificationDo) Create(values ...*isa95.PersonnelSpecification) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p personnelSpecificationDo) CreateInBatches(values []*isa95.PersonnelSpecification, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p personnelSpecificationDo) Save(values ...*isa95.PersonnelSpecification) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p personnelSpecificationDo) First() (*isa95.PersonnelSpecification, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelSpecification), nil
	}
}

func (p personnelSpecificationDo) Take() (*isa95.PersonnelSpecification, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelSpecification), nil
	}
}

func (p personnelSpecificationDo) Last() (*isa95.PersonnelSpecification, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelSpecification), nil
	}
}

func (p personnelSpecificationDo) Find() ([]*isa95.PersonnelSpecification, error) {
	result, err := p.DO.Find()
	return result.([]*isa95.PersonnelSpecification), err
}

func (p personnelSpecificationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.PersonnelSpecification, err error) {
	buf := make([]*isa95.PersonnelSpecification, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p personnelSpecificationDo) FindInBatches(result *[]*isa95.PersonnelSpecification, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p personnelSpecificationDo) Attrs(attrs ...field.AssignExpr) *personnelSpecificationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p personnelSpecificationDo) Assign(attrs ...field.AssignExpr) *personnelSpecificationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p personnelSpecificationDo) Joins(fields ...field.RelationField) *personnelSpecificationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p personnelSpecificationDo) Preload(fields ...field.RelationField) *personnelSpecificationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p personnelSpecificationDo) FirstOrInit() (*isa95.PersonnelSpecification, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelSpecification), nil
	}
}

func (p personnelSpecificationDo) FirstOrCreate() (*isa95.PersonnelSpecification, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelSpecification), nil
	}
}

func (p personnelSpecificationDo) FindByPage(offset int, limit int) (result []*isa95.PersonnelSpecification, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p personnelSpecificationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p personnelSpecificationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p personnelSpecificationDo) Delete(models ...*isa95.PersonnelSpecification) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *personnelSpecificationDo) withDO(do gen.Dao) *personnelSpecificationDo {
	p.DO = *do.(*gen.DO)
	return p
}
