// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newLevel(db *gorm.DB, opts ...gen.DOOption) level {
	_level := level{}

	_level.levelDo.UseDB(db, opts...)
	_level.levelDo.UseModel(&isa95.Level{})

	tableName := _level.levelDo.TableName()
	_level.ALL = field.NewAsterisk(tableName)
	_level.ID = field.NewUint(tableName, "id")
	_level.CreatedAt = field.NewTime(tableName, "created_at")
	_level.UpdatedAt = field.NewTime(tableName, "updated_at")
	_level.DeletedAt = field.NewField(tableName, "deleted_at")
	_level.Description = field.NewString(tableName, "description")
	_level.LevelLookupID = field.NewUint(tableName, "level_lookup_id")
	_level.ParentLevelID = field.NewUint(tableName, "parent_level_id")
	_level.LevelLookup = levelBelongsToLevelLookup{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("LevelLookup", "isa95.LevelLookup"),
	}

	_level.fillFieldMap()

	return _level
}

type level struct {
	levelDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Description   field.String
	LevelLookupID field.Uint
	ParentLevelID field.Uint
	LevelLookup   levelBelongsToLevelLookup

	fieldMap map[string]field.Expr
}

func (l level) Table(newTableName string) *level {
	l.levelDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l level) As(alias string) *level {
	l.levelDo.DO = *(l.levelDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *level) updateTableName(table string) *level {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewUint(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")
	l.Description = field.NewString(table, "description")
	l.LevelLookupID = field.NewUint(table, "level_lookup_id")
	l.ParentLevelID = field.NewUint(table, "parent_level_id")

	l.fillFieldMap()

	return l
}

func (l *level) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *level) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 8)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["description"] = l.Description
	l.fieldMap["level_lookup_id"] = l.LevelLookupID
	l.fieldMap["parent_level_id"] = l.ParentLevelID

}

func (l level) clone(db *gorm.DB) level {
	l.levelDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l level) replaceDB(db *gorm.DB) level {
	l.levelDo.ReplaceDB(db)
	return l
}

type levelBelongsToLevelLookup struct {
	db *gorm.DB

	field.RelationField
}

func (a levelBelongsToLevelLookup) Where(conds ...field.Expr) *levelBelongsToLevelLookup {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a levelBelongsToLevelLookup) WithContext(ctx context.Context) *levelBelongsToLevelLookup {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a levelBelongsToLevelLookup) Session(session *gorm.Session) *levelBelongsToLevelLookup {
	a.db = a.db.Session(session)
	return &a
}

func (a levelBelongsToLevelLookup) Model(m *isa95.Level) *levelBelongsToLevelLookupTx {
	return &levelBelongsToLevelLookupTx{a.db.Model(m).Association(a.Name())}
}

type levelBelongsToLevelLookupTx struct{ tx *gorm.Association }

func (a levelBelongsToLevelLookupTx) Find() (result *isa95.LevelLookup, err error) {
	return result, a.tx.Find(&result)
}

func (a levelBelongsToLevelLookupTx) Append(values ...*isa95.LevelLookup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a levelBelongsToLevelLookupTx) Replace(values ...*isa95.LevelLookup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a levelBelongsToLevelLookupTx) Delete(values ...*isa95.LevelLookup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a levelBelongsToLevelLookupTx) Clear() error {
	return a.tx.Clear()
}

func (a levelBelongsToLevelLookupTx) Count() int64 {
	return a.tx.Count()
}

type levelDo struct{ gen.DO }

func (l levelDo) Debug() *levelDo {
	return l.withDO(l.DO.Debug())
}

func (l levelDo) WithContext(ctx context.Context) *levelDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l levelDo) ReadDB() *levelDo {
	return l.Clauses(dbresolver.Read)
}

func (l levelDo) WriteDB() *levelDo {
	return l.Clauses(dbresolver.Write)
}

func (l levelDo) Session(config *gorm.Session) *levelDo {
	return l.withDO(l.DO.Session(config))
}

func (l levelDo) Clauses(conds ...clause.Expression) *levelDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l levelDo) Returning(value interface{}, columns ...string) *levelDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l levelDo) Not(conds ...gen.Condition) *levelDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l levelDo) Or(conds ...gen.Condition) *levelDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l levelDo) Select(conds ...field.Expr) *levelDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l levelDo) Where(conds ...gen.Condition) *levelDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l levelDo) Order(conds ...field.Expr) *levelDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l levelDo) Distinct(cols ...field.Expr) *levelDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l levelDo) Omit(cols ...field.Expr) *levelDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l levelDo) Join(table schema.Tabler, on ...field.Expr) *levelDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l levelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *levelDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l levelDo) RightJoin(table schema.Tabler, on ...field.Expr) *levelDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l levelDo) Group(cols ...field.Expr) *levelDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l levelDo) Having(conds ...gen.Condition) *levelDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l levelDo) Limit(limit int) *levelDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l levelDo) Offset(offset int) *levelDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l levelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *levelDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l levelDo) Unscoped() *levelDo {
	return l.withDO(l.DO.Unscoped())
}

func (l levelDo) Create(values ...*isa95.Level) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l levelDo) CreateInBatches(values []*isa95.Level, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l levelDo) Save(values ...*isa95.Level) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l levelDo) First() (*isa95.Level, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.Level), nil
	}
}

func (l levelDo) Take() (*isa95.Level, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.Level), nil
	}
}

func (l levelDo) Last() (*isa95.Level, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.Level), nil
	}
}

func (l levelDo) Find() ([]*isa95.Level, error) {
	result, err := l.DO.Find()
	return result.([]*isa95.Level), err
}

func (l levelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.Level, err error) {
	buf := make([]*isa95.Level, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l levelDo) FindInBatches(result *[]*isa95.Level, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l levelDo) Attrs(attrs ...field.AssignExpr) *levelDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l levelDo) Assign(attrs ...field.AssignExpr) *levelDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l levelDo) Joins(fields ...field.RelationField) *levelDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l levelDo) Preload(fields ...field.RelationField) *levelDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l levelDo) FirstOrInit() (*isa95.Level, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.Level), nil
	}
}

func (l levelDo) FirstOrCreate() (*isa95.Level, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.Level), nil
	}
}

func (l levelDo) FindByPage(offset int, limit int) (result []*isa95.Level, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l levelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l levelDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l levelDo) Delete(models ...*isa95.Level) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *levelDo) withDO(do gen.Dao) *levelDo {
	l.DO = *do.(*gen.DO)
	return l
}
