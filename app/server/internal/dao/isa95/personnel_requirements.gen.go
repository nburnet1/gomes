// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newPersonnelRequirement(db *gorm.DB, opts ...gen.DOOption) personnelRequirement {
	_personnelRequirement := personnelRequirement{}

	_personnelRequirement.personnelRequirementDo.UseDB(db, opts...)
	_personnelRequirement.personnelRequirementDo.UseModel(&isa95.PersonnelRequirement{})

	tableName := _personnelRequirement.personnelRequirementDo.TableName()
	_personnelRequirement.ALL = field.NewAsterisk(tableName)
	_personnelRequirement.ID = field.NewUint(tableName, "id")
	_personnelRequirement.CreatedAt = field.NewTime(tableName, "created_at")
	_personnelRequirement.UpdatedAt = field.NewTime(tableName, "updated_at")
	_personnelRequirement.DeletedAt = field.NewField(tableName, "deleted_at")
	_personnelRequirement.PersonnelClassID = field.NewUint(tableName, "personnel_class_id")
	_personnelRequirement.PersonID = field.NewUint(tableName, "person_id")
	_personnelRequirement.Description = field.NewString(tableName, "description")
	_personnelRequirement.UseID = field.NewUint(tableName, "use_id")
	_personnelRequirement.Quantity = field.NewString(tableName, "quantity")
	_personnelRequirement.MeasurementID = field.NewUint(tableName, "measurement_id")
	_personnelRequirement.Measurement = personnelRequirementBelongsToMeasurement{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Measurement", "isa95.Measurement"),
	}

	_personnelRequirement.fillFieldMap()

	return _personnelRequirement
}

type personnelRequirement struct {
	personnelRequirementDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	PersonnelClassID field.Uint
	PersonID         field.Uint
	Description      field.String
	UseID            field.Uint
	Quantity         field.String
	MeasurementID    field.Uint
	Measurement      personnelRequirementBelongsToMeasurement

	fieldMap map[string]field.Expr
}

func (p personnelRequirement) Table(newTableName string) *personnelRequirement {
	p.personnelRequirementDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p personnelRequirement) As(alias string) *personnelRequirement {
	p.personnelRequirementDo.DO = *(p.personnelRequirementDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *personnelRequirement) updateTableName(table string) *personnelRequirement {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PersonnelClassID = field.NewUint(table, "personnel_class_id")
	p.PersonID = field.NewUint(table, "person_id")
	p.Description = field.NewString(table, "description")
	p.UseID = field.NewUint(table, "use_id")
	p.Quantity = field.NewString(table, "quantity")
	p.MeasurementID = field.NewUint(table, "measurement_id")

	p.fillFieldMap()

	return p
}

func (p *personnelRequirement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *personnelRequirement) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["personnel_class_id"] = p.PersonnelClassID
	p.fieldMap["person_id"] = p.PersonID
	p.fieldMap["description"] = p.Description
	p.fieldMap["use_id"] = p.UseID
	p.fieldMap["quantity"] = p.Quantity
	p.fieldMap["measurement_id"] = p.MeasurementID

}

func (p personnelRequirement) clone(db *gorm.DB) personnelRequirement {
	p.personnelRequirementDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p personnelRequirement) replaceDB(db *gorm.DB) personnelRequirement {
	p.personnelRequirementDo.ReplaceDB(db)
	return p
}

type personnelRequirementBelongsToMeasurement struct {
	db *gorm.DB

	field.RelationField
}

func (a personnelRequirementBelongsToMeasurement) Where(conds ...field.Expr) *personnelRequirementBelongsToMeasurement {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a personnelRequirementBelongsToMeasurement) WithContext(ctx context.Context) *personnelRequirementBelongsToMeasurement {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a personnelRequirementBelongsToMeasurement) Session(session *gorm.Session) *personnelRequirementBelongsToMeasurement {
	a.db = a.db.Session(session)
	return &a
}

func (a personnelRequirementBelongsToMeasurement) Model(m *isa95.PersonnelRequirement) *personnelRequirementBelongsToMeasurementTx {
	return &personnelRequirementBelongsToMeasurementTx{a.db.Model(m).Association(a.Name())}
}

type personnelRequirementBelongsToMeasurementTx struct{ tx *gorm.Association }

func (a personnelRequirementBelongsToMeasurementTx) Find() (result *isa95.Measurement, err error) {
	return result, a.tx.Find(&result)
}

func (a personnelRequirementBelongsToMeasurementTx) Append(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a personnelRequirementBelongsToMeasurementTx) Replace(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a personnelRequirementBelongsToMeasurementTx) Delete(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a personnelRequirementBelongsToMeasurementTx) Clear() error {
	return a.tx.Clear()
}

func (a personnelRequirementBelongsToMeasurementTx) Count() int64 {
	return a.tx.Count()
}

type personnelRequirementDo struct{ gen.DO }

func (p personnelRequirementDo) Debug() *personnelRequirementDo {
	return p.withDO(p.DO.Debug())
}

func (p personnelRequirementDo) WithContext(ctx context.Context) *personnelRequirementDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p personnelRequirementDo) ReadDB() *personnelRequirementDo {
	return p.Clauses(dbresolver.Read)
}

func (p personnelRequirementDo) WriteDB() *personnelRequirementDo {
	return p.Clauses(dbresolver.Write)
}

func (p personnelRequirementDo) Session(config *gorm.Session) *personnelRequirementDo {
	return p.withDO(p.DO.Session(config))
}

func (p personnelRequirementDo) Clauses(conds ...clause.Expression) *personnelRequirementDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p personnelRequirementDo) Returning(value interface{}, columns ...string) *personnelRequirementDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p personnelRequirementDo) Not(conds ...gen.Condition) *personnelRequirementDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p personnelRequirementDo) Or(conds ...gen.Condition) *personnelRequirementDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p personnelRequirementDo) Select(conds ...field.Expr) *personnelRequirementDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p personnelRequirementDo) Where(conds ...gen.Condition) *personnelRequirementDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p personnelRequirementDo) Order(conds ...field.Expr) *personnelRequirementDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p personnelRequirementDo) Distinct(cols ...field.Expr) *personnelRequirementDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p personnelRequirementDo) Omit(cols ...field.Expr) *personnelRequirementDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p personnelRequirementDo) Join(table schema.Tabler, on ...field.Expr) *personnelRequirementDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p personnelRequirementDo) LeftJoin(table schema.Tabler, on ...field.Expr) *personnelRequirementDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p personnelRequirementDo) RightJoin(table schema.Tabler, on ...field.Expr) *personnelRequirementDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p personnelRequirementDo) Group(cols ...field.Expr) *personnelRequirementDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p personnelRequirementDo) Having(conds ...gen.Condition) *personnelRequirementDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p personnelRequirementDo) Limit(limit int) *personnelRequirementDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p personnelRequirementDo) Offset(offset int) *personnelRequirementDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p personnelRequirementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *personnelRequirementDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p personnelRequirementDo) Unscoped() *personnelRequirementDo {
	return p.withDO(p.DO.Unscoped())
}

func (p personnelRequirementDo) Create(values ...*isa95.PersonnelRequirement) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p personnelRequirementDo) CreateInBatches(values []*isa95.PersonnelRequirement, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p personnelRequirementDo) Save(values ...*isa95.PersonnelRequirement) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p personnelRequirementDo) First() (*isa95.PersonnelRequirement, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelRequirement), nil
	}
}

func (p personnelRequirementDo) Take() (*isa95.PersonnelRequirement, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelRequirement), nil
	}
}

func (p personnelRequirementDo) Last() (*isa95.PersonnelRequirement, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelRequirement), nil
	}
}

func (p personnelRequirementDo) Find() ([]*isa95.PersonnelRequirement, error) {
	result, err := p.DO.Find()
	return result.([]*isa95.PersonnelRequirement), err
}

func (p personnelRequirementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.PersonnelRequirement, err error) {
	buf := make([]*isa95.PersonnelRequirement, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p personnelRequirementDo) FindInBatches(result *[]*isa95.PersonnelRequirement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p personnelRequirementDo) Attrs(attrs ...field.AssignExpr) *personnelRequirementDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p personnelRequirementDo) Assign(attrs ...field.AssignExpr) *personnelRequirementDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p personnelRequirementDo) Joins(fields ...field.RelationField) *personnelRequirementDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p personnelRequirementDo) Preload(fields ...field.RelationField) *personnelRequirementDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p personnelRequirementDo) FirstOrInit() (*isa95.PersonnelRequirement, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelRequirement), nil
	}
}

func (p personnelRequirementDo) FirstOrCreate() (*isa95.PersonnelRequirement, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelRequirement), nil
	}
}

func (p personnelRequirementDo) FindByPage(offset int, limit int) (result []*isa95.PersonnelRequirement, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p personnelRequirementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p personnelRequirementDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p personnelRequirementDo) Delete(models ...*isa95.PersonnelRequirement) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *personnelRequirementDo) withDO(do gen.Dao) *personnelRequirementDo {
	p.DO = *do.(*gen.DO)
	return p
}
