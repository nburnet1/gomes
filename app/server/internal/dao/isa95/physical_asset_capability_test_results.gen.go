// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newPhysicalAssetCapabilityTestResult(db *gorm.DB, opts ...gen.DOOption) physicalAssetCapabilityTestResult {
	_physicalAssetCapabilityTestResult := physicalAssetCapabilityTestResult{}

	_physicalAssetCapabilityTestResult.physicalAssetCapabilityTestResultDo.UseDB(db, opts...)
	_physicalAssetCapabilityTestResult.physicalAssetCapabilityTestResultDo.UseModel(&isa95.PhysicalAssetCapabilityTestResult{})

	tableName := _physicalAssetCapabilityTestResult.physicalAssetCapabilityTestResultDo.TableName()
	_physicalAssetCapabilityTestResult.ALL = field.NewAsterisk(tableName)
	_physicalAssetCapabilityTestResult.ID = field.NewUint(tableName, "id")
	_physicalAssetCapabilityTestResult.CreatedAt = field.NewTime(tableName, "created_at")
	_physicalAssetCapabilityTestResult.UpdatedAt = field.NewTime(tableName, "updated_at")
	_physicalAssetCapabilityTestResult.DeletedAt = field.NewField(tableName, "deleted_at")
	_physicalAssetCapabilityTestResult.Description = field.NewString(tableName, "description")
	_physicalAssetCapabilityTestResult.Date = field.NewTime(tableName, "date")
	_physicalAssetCapabilityTestResult.Result = field.NewString(tableName, "result")
	_physicalAssetCapabilityTestResult.MeasurementID = field.NewUint(tableName, "measurement_id")
	_physicalAssetCapabilityTestResult.Expiration = field.NewTime(tableName, "expiration")
	_physicalAssetCapabilityTestResult.PhysicalAssetCapabilityTestID = field.NewUint(tableName, "physical_asset_capability_test_id")
	_physicalAssetCapabilityTestResult.Measurement = physicalAssetCapabilityTestResultBelongsToMeasurement{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Measurement", "isa95.Measurement"),
	}

	_physicalAssetCapabilityTestResult.PhysicalAssetCapabilityTest = physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTest{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PhysicalAssetCapabilityTest", "isa95.PhysicalAssetCapabilityTest"),
	}

	_physicalAssetCapabilityTestResult.fillFieldMap()

	return _physicalAssetCapabilityTestResult
}

type physicalAssetCapabilityTestResult struct {
	physicalAssetCapabilityTestResultDo

	ALL                           field.Asterisk
	ID                            field.Uint
	CreatedAt                     field.Time
	UpdatedAt                     field.Time
	DeletedAt                     field.Field
	Description                   field.String
	Date                          field.Time
	Result                        field.String
	MeasurementID                 field.Uint
	Expiration                    field.Time
	PhysicalAssetCapabilityTestID field.Uint
	Measurement                   physicalAssetCapabilityTestResultBelongsToMeasurement

	PhysicalAssetCapabilityTest physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTest

	fieldMap map[string]field.Expr
}

func (p physicalAssetCapabilityTestResult) Table(newTableName string) *physicalAssetCapabilityTestResult {
	p.physicalAssetCapabilityTestResultDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p physicalAssetCapabilityTestResult) As(alias string) *physicalAssetCapabilityTestResult {
	p.physicalAssetCapabilityTestResultDo.DO = *(p.physicalAssetCapabilityTestResultDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *physicalAssetCapabilityTestResult) updateTableName(table string) *physicalAssetCapabilityTestResult {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Description = field.NewString(table, "description")
	p.Date = field.NewTime(table, "date")
	p.Result = field.NewString(table, "result")
	p.MeasurementID = field.NewUint(table, "measurement_id")
	p.Expiration = field.NewTime(table, "expiration")
	p.PhysicalAssetCapabilityTestID = field.NewUint(table, "physical_asset_capability_test_id")

	p.fillFieldMap()

	return p
}

func (p *physicalAssetCapabilityTestResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *physicalAssetCapabilityTestResult) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["description"] = p.Description
	p.fieldMap["date"] = p.Date
	p.fieldMap["result"] = p.Result
	p.fieldMap["measurement_id"] = p.MeasurementID
	p.fieldMap["expiration"] = p.Expiration
	p.fieldMap["physical_asset_capability_test_id"] = p.PhysicalAssetCapabilityTestID

}

func (p physicalAssetCapabilityTestResult) clone(db *gorm.DB) physicalAssetCapabilityTestResult {
	p.physicalAssetCapabilityTestResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p physicalAssetCapabilityTestResult) replaceDB(db *gorm.DB) physicalAssetCapabilityTestResult {
	p.physicalAssetCapabilityTestResultDo.ReplaceDB(db)
	return p
}

type physicalAssetCapabilityTestResultBelongsToMeasurement struct {
	db *gorm.DB

	field.RelationField
}

func (a physicalAssetCapabilityTestResultBelongsToMeasurement) Where(conds ...field.Expr) *physicalAssetCapabilityTestResultBelongsToMeasurement {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a physicalAssetCapabilityTestResultBelongsToMeasurement) WithContext(ctx context.Context) *physicalAssetCapabilityTestResultBelongsToMeasurement {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a physicalAssetCapabilityTestResultBelongsToMeasurement) Session(session *gorm.Session) *physicalAssetCapabilityTestResultBelongsToMeasurement {
	a.db = a.db.Session(session)
	return &a
}

func (a physicalAssetCapabilityTestResultBelongsToMeasurement) Model(m *isa95.PhysicalAssetCapabilityTestResult) *physicalAssetCapabilityTestResultBelongsToMeasurementTx {
	return &physicalAssetCapabilityTestResultBelongsToMeasurementTx{a.db.Model(m).Association(a.Name())}
}

type physicalAssetCapabilityTestResultBelongsToMeasurementTx struct{ tx *gorm.Association }

func (a physicalAssetCapabilityTestResultBelongsToMeasurementTx) Find() (result *isa95.Measurement, err error) {
	return result, a.tx.Find(&result)
}

func (a physicalAssetCapabilityTestResultBelongsToMeasurementTx) Append(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a physicalAssetCapabilityTestResultBelongsToMeasurementTx) Replace(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a physicalAssetCapabilityTestResultBelongsToMeasurementTx) Delete(values ...*isa95.Measurement) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a physicalAssetCapabilityTestResultBelongsToMeasurementTx) Clear() error {
	return a.tx.Clear()
}

func (a physicalAssetCapabilityTestResultBelongsToMeasurementTx) Count() int64 {
	return a.tx.Count()
}

type physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTest struct {
	db *gorm.DB

	field.RelationField
}

func (a physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTest) Where(conds ...field.Expr) *physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTest {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTest) WithContext(ctx context.Context) *physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTest {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTest) Session(session *gorm.Session) *physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTest {
	a.db = a.db.Session(session)
	return &a
}

func (a physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTest) Model(m *isa95.PhysicalAssetCapabilityTestResult) *physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTestTx {
	return &physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTestTx{a.db.Model(m).Association(a.Name())}
}

type physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTestTx struct{ tx *gorm.Association }

func (a physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTestTx) Find() (result *isa95.PhysicalAssetCapabilityTest, err error) {
	return result, a.tx.Find(&result)
}

func (a physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTestTx) Append(values ...*isa95.PhysicalAssetCapabilityTest) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTestTx) Replace(values ...*isa95.PhysicalAssetCapabilityTest) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTestTx) Delete(values ...*isa95.PhysicalAssetCapabilityTest) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTestTx) Clear() error {
	return a.tx.Clear()
}

func (a physicalAssetCapabilityTestResultBelongsToPhysicalAssetCapabilityTestTx) Count() int64 {
	return a.tx.Count()
}

type physicalAssetCapabilityTestResultDo struct{ gen.DO }

func (p physicalAssetCapabilityTestResultDo) Debug() *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Debug())
}

func (p physicalAssetCapabilityTestResultDo) WithContext(ctx context.Context) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p physicalAssetCapabilityTestResultDo) ReadDB() *physicalAssetCapabilityTestResultDo {
	return p.Clauses(dbresolver.Read)
}

func (p physicalAssetCapabilityTestResultDo) WriteDB() *physicalAssetCapabilityTestResultDo {
	return p.Clauses(dbresolver.Write)
}

func (p physicalAssetCapabilityTestResultDo) Session(config *gorm.Session) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Session(config))
}

func (p physicalAssetCapabilityTestResultDo) Clauses(conds ...clause.Expression) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p physicalAssetCapabilityTestResultDo) Returning(value interface{}, columns ...string) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p physicalAssetCapabilityTestResultDo) Not(conds ...gen.Condition) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p physicalAssetCapabilityTestResultDo) Or(conds ...gen.Condition) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p physicalAssetCapabilityTestResultDo) Select(conds ...field.Expr) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p physicalAssetCapabilityTestResultDo) Where(conds ...gen.Condition) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p physicalAssetCapabilityTestResultDo) Order(conds ...field.Expr) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p physicalAssetCapabilityTestResultDo) Distinct(cols ...field.Expr) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p physicalAssetCapabilityTestResultDo) Omit(cols ...field.Expr) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p physicalAssetCapabilityTestResultDo) Join(table schema.Tabler, on ...field.Expr) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p physicalAssetCapabilityTestResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p physicalAssetCapabilityTestResultDo) RightJoin(table schema.Tabler, on ...field.Expr) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p physicalAssetCapabilityTestResultDo) Group(cols ...field.Expr) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p physicalAssetCapabilityTestResultDo) Having(conds ...gen.Condition) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p physicalAssetCapabilityTestResultDo) Limit(limit int) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p physicalAssetCapabilityTestResultDo) Offset(offset int) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p physicalAssetCapabilityTestResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p physicalAssetCapabilityTestResultDo) Unscoped() *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Unscoped())
}

func (p physicalAssetCapabilityTestResultDo) Create(values ...*isa95.PhysicalAssetCapabilityTestResult) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p physicalAssetCapabilityTestResultDo) CreateInBatches(values []*isa95.PhysicalAssetCapabilityTestResult, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p physicalAssetCapabilityTestResultDo) Save(values ...*isa95.PhysicalAssetCapabilityTestResult) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p physicalAssetCapabilityTestResultDo) First() (*isa95.PhysicalAssetCapabilityTestResult, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetCapabilityTestResult), nil
	}
}

func (p physicalAssetCapabilityTestResultDo) Take() (*isa95.PhysicalAssetCapabilityTestResult, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetCapabilityTestResult), nil
	}
}

func (p physicalAssetCapabilityTestResultDo) Last() (*isa95.PhysicalAssetCapabilityTestResult, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetCapabilityTestResult), nil
	}
}

func (p physicalAssetCapabilityTestResultDo) Find() ([]*isa95.PhysicalAssetCapabilityTestResult, error) {
	result, err := p.DO.Find()
	return result.([]*isa95.PhysicalAssetCapabilityTestResult), err
}

func (p physicalAssetCapabilityTestResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.PhysicalAssetCapabilityTestResult, err error) {
	buf := make([]*isa95.PhysicalAssetCapabilityTestResult, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p physicalAssetCapabilityTestResultDo) FindInBatches(result *[]*isa95.PhysicalAssetCapabilityTestResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p physicalAssetCapabilityTestResultDo) Attrs(attrs ...field.AssignExpr) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p physicalAssetCapabilityTestResultDo) Assign(attrs ...field.AssignExpr) *physicalAssetCapabilityTestResultDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p physicalAssetCapabilityTestResultDo) Joins(fields ...field.RelationField) *physicalAssetCapabilityTestResultDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p physicalAssetCapabilityTestResultDo) Preload(fields ...field.RelationField) *physicalAssetCapabilityTestResultDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p physicalAssetCapabilityTestResultDo) FirstOrInit() (*isa95.PhysicalAssetCapabilityTestResult, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetCapabilityTestResult), nil
	}
}

func (p physicalAssetCapabilityTestResultDo) FirstOrCreate() (*isa95.PhysicalAssetCapabilityTestResult, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetCapabilityTestResult), nil
	}
}

func (p physicalAssetCapabilityTestResultDo) FindByPage(offset int, limit int) (result []*isa95.PhysicalAssetCapabilityTestResult, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p physicalAssetCapabilityTestResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p physicalAssetCapabilityTestResultDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p physicalAssetCapabilityTestResultDo) Delete(models ...*isa95.PhysicalAssetCapabilityTestResult) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *physicalAssetCapabilityTestResultDo) withDO(do gen.Dao) *physicalAssetCapabilityTestResultDo {
	p.DO = *do.(*gen.DO)
	return p
}
