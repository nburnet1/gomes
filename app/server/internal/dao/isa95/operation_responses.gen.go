// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newOperationResponse(db *gorm.DB, opts ...gen.DOOption) operationResponse {
	_operationResponse := operationResponse{}

	_operationResponse.operationResponseDo.UseDB(db, opts...)
	_operationResponse.operationResponseDo.UseModel(&isa95.OperationResponse{})

	tableName := _operationResponse.operationResponseDo.TableName()
	_operationResponse.ALL = field.NewAsterisk(tableName)
	_operationResponse.ID = field.NewUint(tableName, "id")
	_operationResponse.CreatedAt = field.NewTime(tableName, "created_at")
	_operationResponse.UpdatedAt = field.NewTime(tableName, "updated_at")
	_operationResponse.DeletedAt = field.NewField(tableName, "deleted_at")
	_operationResponse.Code = field.NewString(tableName, "code")
	_operationResponse.Description = field.NewString(tableName, "description")
	_operationResponse.OperationTypeID = field.NewUint(tableName, "operation_type_id")
	_operationResponse.OperationRequestID = field.NewUint(tableName, "operation_request_id")
	_operationResponse.StartTime = field.NewTime(tableName, "start_time")
	_operationResponse.EndTime = field.NewTime(tableName, "end_time")
	_operationResponse.LevelID = field.NewUint(tableName, "level_id")
	_operationResponse.OperationDefinitionID = field.NewUint(tableName, "operation_definition_id")
	_operationResponse.ResponseState = field.NewString(tableName, "response_state")

	_operationResponse.fillFieldMap()

	return _operationResponse
}

type operationResponse struct {
	operationResponseDo

	ALL                   field.Asterisk
	ID                    field.Uint
	CreatedAt             field.Time
	UpdatedAt             field.Time
	DeletedAt             field.Field
	Code                  field.String
	Description           field.String
	OperationTypeID       field.Uint
	OperationRequestID    field.Uint
	StartTime             field.Time
	EndTime               field.Time
	LevelID               field.Uint
	OperationDefinitionID field.Uint
	ResponseState         field.String

	fieldMap map[string]field.Expr
}

func (o operationResponse) Table(newTableName string) *operationResponse {
	o.operationResponseDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o operationResponse) As(alias string) *operationResponse {
	o.operationResponseDo.DO = *(o.operationResponseDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *operationResponse) updateTableName(table string) *operationResponse {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.Code = field.NewString(table, "code")
	o.Description = field.NewString(table, "description")
	o.OperationTypeID = field.NewUint(table, "operation_type_id")
	o.OperationRequestID = field.NewUint(table, "operation_request_id")
	o.StartTime = field.NewTime(table, "start_time")
	o.EndTime = field.NewTime(table, "end_time")
	o.LevelID = field.NewUint(table, "level_id")
	o.OperationDefinitionID = field.NewUint(table, "operation_definition_id")
	o.ResponseState = field.NewString(table, "response_state")

	o.fillFieldMap()

	return o
}

func (o *operationResponse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *operationResponse) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 13)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["code"] = o.Code
	o.fieldMap["description"] = o.Description
	o.fieldMap["operation_type_id"] = o.OperationTypeID
	o.fieldMap["operation_request_id"] = o.OperationRequestID
	o.fieldMap["start_time"] = o.StartTime
	o.fieldMap["end_time"] = o.EndTime
	o.fieldMap["level_id"] = o.LevelID
	o.fieldMap["operation_definition_id"] = o.OperationDefinitionID
	o.fieldMap["response_state"] = o.ResponseState
}

func (o operationResponse) clone(db *gorm.DB) operationResponse {
	o.operationResponseDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o operationResponse) replaceDB(db *gorm.DB) operationResponse {
	o.operationResponseDo.ReplaceDB(db)
	return o
}

type operationResponseDo struct{ gen.DO }

func (o operationResponseDo) Debug() *operationResponseDo {
	return o.withDO(o.DO.Debug())
}

func (o operationResponseDo) WithContext(ctx context.Context) *operationResponseDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o operationResponseDo) ReadDB() *operationResponseDo {
	return o.Clauses(dbresolver.Read)
}

func (o operationResponseDo) WriteDB() *operationResponseDo {
	return o.Clauses(dbresolver.Write)
}

func (o operationResponseDo) Session(config *gorm.Session) *operationResponseDo {
	return o.withDO(o.DO.Session(config))
}

func (o operationResponseDo) Clauses(conds ...clause.Expression) *operationResponseDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o operationResponseDo) Returning(value interface{}, columns ...string) *operationResponseDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o operationResponseDo) Not(conds ...gen.Condition) *operationResponseDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o operationResponseDo) Or(conds ...gen.Condition) *operationResponseDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o operationResponseDo) Select(conds ...field.Expr) *operationResponseDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o operationResponseDo) Where(conds ...gen.Condition) *operationResponseDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o operationResponseDo) Order(conds ...field.Expr) *operationResponseDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o operationResponseDo) Distinct(cols ...field.Expr) *operationResponseDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o operationResponseDo) Omit(cols ...field.Expr) *operationResponseDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o operationResponseDo) Join(table schema.Tabler, on ...field.Expr) *operationResponseDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o operationResponseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *operationResponseDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o operationResponseDo) RightJoin(table schema.Tabler, on ...field.Expr) *operationResponseDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o operationResponseDo) Group(cols ...field.Expr) *operationResponseDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o operationResponseDo) Having(conds ...gen.Condition) *operationResponseDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o operationResponseDo) Limit(limit int) *operationResponseDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o operationResponseDo) Offset(offset int) *operationResponseDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o operationResponseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *operationResponseDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o operationResponseDo) Unscoped() *operationResponseDo {
	return o.withDO(o.DO.Unscoped())
}

func (o operationResponseDo) Create(values ...*isa95.OperationResponse) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o operationResponseDo) CreateInBatches(values []*isa95.OperationResponse, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o operationResponseDo) Save(values ...*isa95.OperationResponse) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o operationResponseDo) First() (*isa95.OperationResponse, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationResponse), nil
	}
}

func (o operationResponseDo) Take() (*isa95.OperationResponse, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationResponse), nil
	}
}

func (o operationResponseDo) Last() (*isa95.OperationResponse, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationResponse), nil
	}
}

func (o operationResponseDo) Find() ([]*isa95.OperationResponse, error) {
	result, err := o.DO.Find()
	return result.([]*isa95.OperationResponse), err
}

func (o operationResponseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.OperationResponse, err error) {
	buf := make([]*isa95.OperationResponse, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o operationResponseDo) FindInBatches(result *[]*isa95.OperationResponse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o operationResponseDo) Attrs(attrs ...field.AssignExpr) *operationResponseDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o operationResponseDo) Assign(attrs ...field.AssignExpr) *operationResponseDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o operationResponseDo) Joins(fields ...field.RelationField) *operationResponseDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o operationResponseDo) Preload(fields ...field.RelationField) *operationResponseDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o operationResponseDo) FirstOrInit() (*isa95.OperationResponse, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationResponse), nil
	}
}

func (o operationResponseDo) FirstOrCreate() (*isa95.OperationResponse, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationResponse), nil
	}
}

func (o operationResponseDo) FindByPage(offset int, limit int) (result []*isa95.OperationResponse, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o operationResponseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o operationResponseDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o operationResponseDo) Delete(models ...*isa95.OperationResponse) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *operationResponseDo) withDO(do gen.Dao) *operationResponseDo {
	o.DO = *do.(*gen.DO)
	return o
}
