// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newOperationSchedule(db *gorm.DB, opts ...gen.DOOption) operationSchedule {
	_operationSchedule := operationSchedule{}

	_operationSchedule.operationScheduleDo.UseDB(db, opts...)
	_operationSchedule.operationScheduleDo.UseModel(&isa95.OperationSchedule{})

	tableName := _operationSchedule.operationScheduleDo.TableName()
	_operationSchedule.ALL = field.NewAsterisk(tableName)
	_operationSchedule.ID = field.NewUint(tableName, "id")
	_operationSchedule.CreatedAt = field.NewTime(tableName, "created_at")
	_operationSchedule.UpdatedAt = field.NewTime(tableName, "updated_at")
	_operationSchedule.DeletedAt = field.NewField(tableName, "deleted_at")
	_operationSchedule.Code = field.NewString(tableName, "code")
	_operationSchedule.Description = field.NewString(tableName, "description")
	_operationSchedule.OperationTypeID = field.NewUint(tableName, "operation_type_id")
	_operationSchedule.StartTime = field.NewTime(tableName, "start_time")
	_operationSchedule.EndTime = field.NewTime(tableName, "end_time")
	_operationSchedule.LevelID = field.NewUint(tableName, "level_id")
	_operationSchedule.ScheduleState = field.NewString(tableName, "schedule_state")

	_operationSchedule.fillFieldMap()

	return _operationSchedule
}

type operationSchedule struct {
	operationScheduleDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	Code            field.String
	Description     field.String
	OperationTypeID field.Uint
	StartTime       field.Time
	EndTime         field.Time
	LevelID         field.Uint
	ScheduleState   field.String

	fieldMap map[string]field.Expr
}

func (o operationSchedule) Table(newTableName string) *operationSchedule {
	o.operationScheduleDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o operationSchedule) As(alias string) *operationSchedule {
	o.operationScheduleDo.DO = *(o.operationScheduleDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *operationSchedule) updateTableName(table string) *operationSchedule {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.Code = field.NewString(table, "code")
	o.Description = field.NewString(table, "description")
	o.OperationTypeID = field.NewUint(table, "operation_type_id")
	o.StartTime = field.NewTime(table, "start_time")
	o.EndTime = field.NewTime(table, "end_time")
	o.LevelID = field.NewUint(table, "level_id")
	o.ScheduleState = field.NewString(table, "schedule_state")

	o.fillFieldMap()

	return o
}

func (o *operationSchedule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *operationSchedule) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 11)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["code"] = o.Code
	o.fieldMap["description"] = o.Description
	o.fieldMap["operation_type_id"] = o.OperationTypeID
	o.fieldMap["start_time"] = o.StartTime
	o.fieldMap["end_time"] = o.EndTime
	o.fieldMap["level_id"] = o.LevelID
	o.fieldMap["schedule_state"] = o.ScheduleState
}

func (o operationSchedule) clone(db *gorm.DB) operationSchedule {
	o.operationScheduleDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o operationSchedule) replaceDB(db *gorm.DB) operationSchedule {
	o.operationScheduleDo.ReplaceDB(db)
	return o
}

type operationScheduleDo struct{ gen.DO }

func (o operationScheduleDo) Debug() *operationScheduleDo {
	return o.withDO(o.DO.Debug())
}

func (o operationScheduleDo) WithContext(ctx context.Context) *operationScheduleDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o operationScheduleDo) ReadDB() *operationScheduleDo {
	return o.Clauses(dbresolver.Read)
}

func (o operationScheduleDo) WriteDB() *operationScheduleDo {
	return o.Clauses(dbresolver.Write)
}

func (o operationScheduleDo) Session(config *gorm.Session) *operationScheduleDo {
	return o.withDO(o.DO.Session(config))
}

func (o operationScheduleDo) Clauses(conds ...clause.Expression) *operationScheduleDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o operationScheduleDo) Returning(value interface{}, columns ...string) *operationScheduleDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o operationScheduleDo) Not(conds ...gen.Condition) *operationScheduleDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o operationScheduleDo) Or(conds ...gen.Condition) *operationScheduleDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o operationScheduleDo) Select(conds ...field.Expr) *operationScheduleDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o operationScheduleDo) Where(conds ...gen.Condition) *operationScheduleDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o operationScheduleDo) Order(conds ...field.Expr) *operationScheduleDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o operationScheduleDo) Distinct(cols ...field.Expr) *operationScheduleDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o operationScheduleDo) Omit(cols ...field.Expr) *operationScheduleDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o operationScheduleDo) Join(table schema.Tabler, on ...field.Expr) *operationScheduleDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o operationScheduleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *operationScheduleDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o operationScheduleDo) RightJoin(table schema.Tabler, on ...field.Expr) *operationScheduleDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o operationScheduleDo) Group(cols ...field.Expr) *operationScheduleDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o operationScheduleDo) Having(conds ...gen.Condition) *operationScheduleDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o operationScheduleDo) Limit(limit int) *operationScheduleDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o operationScheduleDo) Offset(offset int) *operationScheduleDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o operationScheduleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *operationScheduleDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o operationScheduleDo) Unscoped() *operationScheduleDo {
	return o.withDO(o.DO.Unscoped())
}

func (o operationScheduleDo) Create(values ...*isa95.OperationSchedule) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o operationScheduleDo) CreateInBatches(values []*isa95.OperationSchedule, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o operationScheduleDo) Save(values ...*isa95.OperationSchedule) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o operationScheduleDo) First() (*isa95.OperationSchedule, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationSchedule), nil
	}
}

func (o operationScheduleDo) Take() (*isa95.OperationSchedule, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationSchedule), nil
	}
}

func (o operationScheduleDo) Last() (*isa95.OperationSchedule, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationSchedule), nil
	}
}

func (o operationScheduleDo) Find() ([]*isa95.OperationSchedule, error) {
	result, err := o.DO.Find()
	return result.([]*isa95.OperationSchedule), err
}

func (o operationScheduleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.OperationSchedule, err error) {
	buf := make([]*isa95.OperationSchedule, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o operationScheduleDo) FindInBatches(result *[]*isa95.OperationSchedule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o operationScheduleDo) Attrs(attrs ...field.AssignExpr) *operationScheduleDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o operationScheduleDo) Assign(attrs ...field.AssignExpr) *operationScheduleDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o operationScheduleDo) Joins(fields ...field.RelationField) *operationScheduleDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o operationScheduleDo) Preload(fields ...field.RelationField) *operationScheduleDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o operationScheduleDo) FirstOrInit() (*isa95.OperationSchedule, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationSchedule), nil
	}
}

func (o operationScheduleDo) FirstOrCreate() (*isa95.OperationSchedule, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationSchedule), nil
	}
}

func (o operationScheduleDo) FindByPage(offset int, limit int) (result []*isa95.OperationSchedule, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o operationScheduleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o operationScheduleDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o operationScheduleDo) Delete(models ...*isa95.OperationSchedule) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *operationScheduleDo) withDO(do gen.Dao) *operationScheduleDo {
	o.DO = *do.(*gen.DO)
	return o
}
