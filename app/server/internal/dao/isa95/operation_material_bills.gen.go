// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newOperationMaterialBill(db *gorm.DB, opts ...gen.DOOption) operationMaterialBill {
	_operationMaterialBill := operationMaterialBill{}

	_operationMaterialBill.operationMaterialBillDo.UseDB(db, opts...)
	_operationMaterialBill.operationMaterialBillDo.UseModel(&isa95.OperationMaterialBill{})

	tableName := _operationMaterialBill.operationMaterialBillDo.TableName()
	_operationMaterialBill.ALL = field.NewAsterisk(tableName)
	_operationMaterialBill.ID = field.NewUint(tableName, "id")
	_operationMaterialBill.CreatedAt = field.NewTime(tableName, "created_at")
	_operationMaterialBill.UpdatedAt = field.NewTime(tableName, "updated_at")
	_operationMaterialBill.DeletedAt = field.NewField(tableName, "deleted_at")
	_operationMaterialBill.Code = field.NewString(tableName, "code")
	_operationMaterialBill.Description = field.NewString(tableName, "description")

	_operationMaterialBill.fillFieldMap()

	return _operationMaterialBill
}

type operationMaterialBill struct {
	operationMaterialBillDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Code        field.String
	Description field.String

	fieldMap map[string]field.Expr
}

func (o operationMaterialBill) Table(newTableName string) *operationMaterialBill {
	o.operationMaterialBillDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o operationMaterialBill) As(alias string) *operationMaterialBill {
	o.operationMaterialBillDo.DO = *(o.operationMaterialBillDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *operationMaterialBill) updateTableName(table string) *operationMaterialBill {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.Code = field.NewString(table, "code")
	o.Description = field.NewString(table, "description")

	o.fillFieldMap()

	return o
}

func (o *operationMaterialBill) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *operationMaterialBill) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 6)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["code"] = o.Code
	o.fieldMap["description"] = o.Description
}

func (o operationMaterialBill) clone(db *gorm.DB) operationMaterialBill {
	o.operationMaterialBillDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o operationMaterialBill) replaceDB(db *gorm.DB) operationMaterialBill {
	o.operationMaterialBillDo.ReplaceDB(db)
	return o
}

type operationMaterialBillDo struct{ gen.DO }

func (o operationMaterialBillDo) Debug() *operationMaterialBillDo {
	return o.withDO(o.DO.Debug())
}

func (o operationMaterialBillDo) WithContext(ctx context.Context) *operationMaterialBillDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o operationMaterialBillDo) ReadDB() *operationMaterialBillDo {
	return o.Clauses(dbresolver.Read)
}

func (o operationMaterialBillDo) WriteDB() *operationMaterialBillDo {
	return o.Clauses(dbresolver.Write)
}

func (o operationMaterialBillDo) Session(config *gorm.Session) *operationMaterialBillDo {
	return o.withDO(o.DO.Session(config))
}

func (o operationMaterialBillDo) Clauses(conds ...clause.Expression) *operationMaterialBillDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o operationMaterialBillDo) Returning(value interface{}, columns ...string) *operationMaterialBillDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o operationMaterialBillDo) Not(conds ...gen.Condition) *operationMaterialBillDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o operationMaterialBillDo) Or(conds ...gen.Condition) *operationMaterialBillDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o operationMaterialBillDo) Select(conds ...field.Expr) *operationMaterialBillDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o operationMaterialBillDo) Where(conds ...gen.Condition) *operationMaterialBillDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o operationMaterialBillDo) Order(conds ...field.Expr) *operationMaterialBillDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o operationMaterialBillDo) Distinct(cols ...field.Expr) *operationMaterialBillDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o operationMaterialBillDo) Omit(cols ...field.Expr) *operationMaterialBillDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o operationMaterialBillDo) Join(table schema.Tabler, on ...field.Expr) *operationMaterialBillDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o operationMaterialBillDo) LeftJoin(table schema.Tabler, on ...field.Expr) *operationMaterialBillDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o operationMaterialBillDo) RightJoin(table schema.Tabler, on ...field.Expr) *operationMaterialBillDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o operationMaterialBillDo) Group(cols ...field.Expr) *operationMaterialBillDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o operationMaterialBillDo) Having(conds ...gen.Condition) *operationMaterialBillDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o operationMaterialBillDo) Limit(limit int) *operationMaterialBillDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o operationMaterialBillDo) Offset(offset int) *operationMaterialBillDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o operationMaterialBillDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *operationMaterialBillDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o operationMaterialBillDo) Unscoped() *operationMaterialBillDo {
	return o.withDO(o.DO.Unscoped())
}

func (o operationMaterialBillDo) Create(values ...*isa95.OperationMaterialBill) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o operationMaterialBillDo) CreateInBatches(values []*isa95.OperationMaterialBill, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o operationMaterialBillDo) Save(values ...*isa95.OperationMaterialBill) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o operationMaterialBillDo) First() (*isa95.OperationMaterialBill, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationMaterialBill), nil
	}
}

func (o operationMaterialBillDo) Take() (*isa95.OperationMaterialBill, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationMaterialBill), nil
	}
}

func (o operationMaterialBillDo) Last() (*isa95.OperationMaterialBill, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationMaterialBill), nil
	}
}

func (o operationMaterialBillDo) Find() ([]*isa95.OperationMaterialBill, error) {
	result, err := o.DO.Find()
	return result.([]*isa95.OperationMaterialBill), err
}

func (o operationMaterialBillDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.OperationMaterialBill, err error) {
	buf := make([]*isa95.OperationMaterialBill, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o operationMaterialBillDo) FindInBatches(result *[]*isa95.OperationMaterialBill, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o operationMaterialBillDo) Attrs(attrs ...field.AssignExpr) *operationMaterialBillDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o operationMaterialBillDo) Assign(attrs ...field.AssignExpr) *operationMaterialBillDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o operationMaterialBillDo) Joins(fields ...field.RelationField) *operationMaterialBillDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o operationMaterialBillDo) Preload(fields ...field.RelationField) *operationMaterialBillDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o operationMaterialBillDo) FirstOrInit() (*isa95.OperationMaterialBill, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationMaterialBill), nil
	}
}

func (o operationMaterialBillDo) FirstOrCreate() (*isa95.OperationMaterialBill, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationMaterialBill), nil
	}
}

func (o operationMaterialBillDo) FindByPage(offset int, limit int) (result []*isa95.OperationMaterialBill, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o operationMaterialBillDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o operationMaterialBillDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o operationMaterialBillDo) Delete(models ...*isa95.OperationMaterialBill) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *operationMaterialBillDo) withDO(do gen.Dao) *operationMaterialBillDo {
	o.DO = *do.(*gen.DO)
	return o
}
