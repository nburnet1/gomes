// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newOperationCapability(db *gorm.DB, opts ...gen.DOOption) operationCapability {
	_operationCapability := operationCapability{}

	_operationCapability.operationCapabilityDo.UseDB(db, opts...)
	_operationCapability.operationCapabilityDo.UseModel(&isa95.OperationCapability{})

	tableName := _operationCapability.operationCapabilityDo.TableName()
	_operationCapability.ALL = field.NewAsterisk(tableName)
	_operationCapability.ID = field.NewUint(tableName, "id")
	_operationCapability.CreatedAt = field.NewTime(tableName, "created_at")
	_operationCapability.UpdatedAt = field.NewTime(tableName, "updated_at")
	_operationCapability.DeletedAt = field.NewField(tableName, "deleted_at")
	_operationCapability.Code = field.NewString(tableName, "code")
	_operationCapability.Description = field.NewString(tableName, "description")
	_operationCapability.CapacityType = field.NewString(tableName, "capacity_type")
	_operationCapability.Reason = field.NewString(tableName, "reason")
	_operationCapability.ConfidenceFactor = field.NewString(tableName, "confidence_factor")
	_operationCapability.StartTime = field.NewTime(tableName, "start_time")
	_operationCapability.EndTime = field.NewTime(tableName, "end_time")
	_operationCapability.LevelID = field.NewUint(tableName, "level_id")

	_operationCapability.fillFieldMap()

	return _operationCapability
}

type operationCapability struct {
	operationCapabilityDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	Code             field.String
	Description      field.String
	CapacityType     field.String
	Reason           field.String
	ConfidenceFactor field.String
	StartTime        field.Time
	EndTime          field.Time
	LevelID          field.Uint

	fieldMap map[string]field.Expr
}

func (o operationCapability) Table(newTableName string) *operationCapability {
	o.operationCapabilityDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o operationCapability) As(alias string) *operationCapability {
	o.operationCapabilityDo.DO = *(o.operationCapabilityDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *operationCapability) updateTableName(table string) *operationCapability {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.Code = field.NewString(table, "code")
	o.Description = field.NewString(table, "description")
	o.CapacityType = field.NewString(table, "capacity_type")
	o.Reason = field.NewString(table, "reason")
	o.ConfidenceFactor = field.NewString(table, "confidence_factor")
	o.StartTime = field.NewTime(table, "start_time")
	o.EndTime = field.NewTime(table, "end_time")
	o.LevelID = field.NewUint(table, "level_id")

	o.fillFieldMap()

	return o
}

func (o *operationCapability) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *operationCapability) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 12)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["code"] = o.Code
	o.fieldMap["description"] = o.Description
	o.fieldMap["capacity_type"] = o.CapacityType
	o.fieldMap["reason"] = o.Reason
	o.fieldMap["confidence_factor"] = o.ConfidenceFactor
	o.fieldMap["start_time"] = o.StartTime
	o.fieldMap["end_time"] = o.EndTime
	o.fieldMap["level_id"] = o.LevelID
}

func (o operationCapability) clone(db *gorm.DB) operationCapability {
	o.operationCapabilityDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o operationCapability) replaceDB(db *gorm.DB) operationCapability {
	o.operationCapabilityDo.ReplaceDB(db)
	return o
}

type operationCapabilityDo struct{ gen.DO }

func (o operationCapabilityDo) Debug() *operationCapabilityDo {
	return o.withDO(o.DO.Debug())
}

func (o operationCapabilityDo) WithContext(ctx context.Context) *operationCapabilityDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o operationCapabilityDo) ReadDB() *operationCapabilityDo {
	return o.Clauses(dbresolver.Read)
}

func (o operationCapabilityDo) WriteDB() *operationCapabilityDo {
	return o.Clauses(dbresolver.Write)
}

func (o operationCapabilityDo) Session(config *gorm.Session) *operationCapabilityDo {
	return o.withDO(o.DO.Session(config))
}

func (o operationCapabilityDo) Clauses(conds ...clause.Expression) *operationCapabilityDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o operationCapabilityDo) Returning(value interface{}, columns ...string) *operationCapabilityDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o operationCapabilityDo) Not(conds ...gen.Condition) *operationCapabilityDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o operationCapabilityDo) Or(conds ...gen.Condition) *operationCapabilityDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o operationCapabilityDo) Select(conds ...field.Expr) *operationCapabilityDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o operationCapabilityDo) Where(conds ...gen.Condition) *operationCapabilityDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o operationCapabilityDo) Order(conds ...field.Expr) *operationCapabilityDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o operationCapabilityDo) Distinct(cols ...field.Expr) *operationCapabilityDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o operationCapabilityDo) Omit(cols ...field.Expr) *operationCapabilityDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o operationCapabilityDo) Join(table schema.Tabler, on ...field.Expr) *operationCapabilityDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o operationCapabilityDo) LeftJoin(table schema.Tabler, on ...field.Expr) *operationCapabilityDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o operationCapabilityDo) RightJoin(table schema.Tabler, on ...field.Expr) *operationCapabilityDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o operationCapabilityDo) Group(cols ...field.Expr) *operationCapabilityDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o operationCapabilityDo) Having(conds ...gen.Condition) *operationCapabilityDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o operationCapabilityDo) Limit(limit int) *operationCapabilityDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o operationCapabilityDo) Offset(offset int) *operationCapabilityDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o operationCapabilityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *operationCapabilityDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o operationCapabilityDo) Unscoped() *operationCapabilityDo {
	return o.withDO(o.DO.Unscoped())
}

func (o operationCapabilityDo) Create(values ...*isa95.OperationCapability) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o operationCapabilityDo) CreateInBatches(values []*isa95.OperationCapability, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o operationCapabilityDo) Save(values ...*isa95.OperationCapability) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o operationCapabilityDo) First() (*isa95.OperationCapability, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationCapability), nil
	}
}

func (o operationCapabilityDo) Take() (*isa95.OperationCapability, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationCapability), nil
	}
}

func (o operationCapabilityDo) Last() (*isa95.OperationCapability, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationCapability), nil
	}
}

func (o operationCapabilityDo) Find() ([]*isa95.OperationCapability, error) {
	result, err := o.DO.Find()
	return result.([]*isa95.OperationCapability), err
}

func (o operationCapabilityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.OperationCapability, err error) {
	buf := make([]*isa95.OperationCapability, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o operationCapabilityDo) FindInBatches(result *[]*isa95.OperationCapability, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o operationCapabilityDo) Attrs(attrs ...field.AssignExpr) *operationCapabilityDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o operationCapabilityDo) Assign(attrs ...field.AssignExpr) *operationCapabilityDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o operationCapabilityDo) Joins(fields ...field.RelationField) *operationCapabilityDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o operationCapabilityDo) Preload(fields ...field.RelationField) *operationCapabilityDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o operationCapabilityDo) FirstOrInit() (*isa95.OperationCapability, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationCapability), nil
	}
}

func (o operationCapabilityDo) FirstOrCreate() (*isa95.OperationCapability, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.OperationCapability), nil
	}
}

func (o operationCapabilityDo) FindByPage(offset int, limit int) (result []*isa95.OperationCapability, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o operationCapabilityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o operationCapabilityDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o operationCapabilityDo) Delete(models ...*isa95.OperationCapability) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *operationCapabilityDo) withDO(do gen.Dao) *operationCapabilityDo {
	o.DO = *do.(*gen.DO)
	return o
}
