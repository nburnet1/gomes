// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newPhysicalAssetActualProperty(db *gorm.DB, opts ...gen.DOOption) physicalAssetActualProperty {
	_physicalAssetActualProperty := physicalAssetActualProperty{}

	_physicalAssetActualProperty.physicalAssetActualPropertyDo.UseDB(db, opts...)
	_physicalAssetActualProperty.physicalAssetActualPropertyDo.UseModel(&isa95.PhysicalAssetActualProperty{})

	tableName := _physicalAssetActualProperty.physicalAssetActualPropertyDo.TableName()
	_physicalAssetActualProperty.ALL = field.NewAsterisk(tableName)
	_physicalAssetActualProperty.ID = field.NewUint(tableName, "id")
	_physicalAssetActualProperty.CreatedAt = field.NewTime(tableName, "created_at")
	_physicalAssetActualProperty.UpdatedAt = field.NewTime(tableName, "updated_at")
	_physicalAssetActualProperty.DeletedAt = field.NewField(tableName, "deleted_at")

	_physicalAssetActualProperty.fillFieldMap()

	return _physicalAssetActualProperty
}

type physicalAssetActualProperty struct {
	physicalAssetActualPropertyDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (p physicalAssetActualProperty) Table(newTableName string) *physicalAssetActualProperty {
	p.physicalAssetActualPropertyDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p physicalAssetActualProperty) As(alias string) *physicalAssetActualProperty {
	p.physicalAssetActualPropertyDo.DO = *(p.physicalAssetActualPropertyDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *physicalAssetActualProperty) updateTableName(table string) *physicalAssetActualProperty {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *physicalAssetActualProperty) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *physicalAssetActualProperty) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p physicalAssetActualProperty) clone(db *gorm.DB) physicalAssetActualProperty {
	p.physicalAssetActualPropertyDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p physicalAssetActualProperty) replaceDB(db *gorm.DB) physicalAssetActualProperty {
	p.physicalAssetActualPropertyDo.ReplaceDB(db)
	return p
}

type physicalAssetActualPropertyDo struct{ gen.DO }

func (p physicalAssetActualPropertyDo) Debug() *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Debug())
}

func (p physicalAssetActualPropertyDo) WithContext(ctx context.Context) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p physicalAssetActualPropertyDo) ReadDB() *physicalAssetActualPropertyDo {
	return p.Clauses(dbresolver.Read)
}

func (p physicalAssetActualPropertyDo) WriteDB() *physicalAssetActualPropertyDo {
	return p.Clauses(dbresolver.Write)
}

func (p physicalAssetActualPropertyDo) Session(config *gorm.Session) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Session(config))
}

func (p physicalAssetActualPropertyDo) Clauses(conds ...clause.Expression) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p physicalAssetActualPropertyDo) Returning(value interface{}, columns ...string) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p physicalAssetActualPropertyDo) Not(conds ...gen.Condition) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p physicalAssetActualPropertyDo) Or(conds ...gen.Condition) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p physicalAssetActualPropertyDo) Select(conds ...field.Expr) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p physicalAssetActualPropertyDo) Where(conds ...gen.Condition) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p physicalAssetActualPropertyDo) Order(conds ...field.Expr) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p physicalAssetActualPropertyDo) Distinct(cols ...field.Expr) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p physicalAssetActualPropertyDo) Omit(cols ...field.Expr) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p physicalAssetActualPropertyDo) Join(table schema.Tabler, on ...field.Expr) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p physicalAssetActualPropertyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p physicalAssetActualPropertyDo) RightJoin(table schema.Tabler, on ...field.Expr) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p physicalAssetActualPropertyDo) Group(cols ...field.Expr) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p physicalAssetActualPropertyDo) Having(conds ...gen.Condition) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p physicalAssetActualPropertyDo) Limit(limit int) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p physicalAssetActualPropertyDo) Offset(offset int) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p physicalAssetActualPropertyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p physicalAssetActualPropertyDo) Unscoped() *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Unscoped())
}

func (p physicalAssetActualPropertyDo) Create(values ...*isa95.PhysicalAssetActualProperty) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p physicalAssetActualPropertyDo) CreateInBatches(values []*isa95.PhysicalAssetActualProperty, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p physicalAssetActualPropertyDo) Save(values ...*isa95.PhysicalAssetActualProperty) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p physicalAssetActualPropertyDo) First() (*isa95.PhysicalAssetActualProperty, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetActualProperty), nil
	}
}

func (p physicalAssetActualPropertyDo) Take() (*isa95.PhysicalAssetActualProperty, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetActualProperty), nil
	}
}

func (p physicalAssetActualPropertyDo) Last() (*isa95.PhysicalAssetActualProperty, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetActualProperty), nil
	}
}

func (p physicalAssetActualPropertyDo) Find() ([]*isa95.PhysicalAssetActualProperty, error) {
	result, err := p.DO.Find()
	return result.([]*isa95.PhysicalAssetActualProperty), err
}

func (p physicalAssetActualPropertyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.PhysicalAssetActualProperty, err error) {
	buf := make([]*isa95.PhysicalAssetActualProperty, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p physicalAssetActualPropertyDo) FindInBatches(result *[]*isa95.PhysicalAssetActualProperty, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p physicalAssetActualPropertyDo) Attrs(attrs ...field.AssignExpr) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p physicalAssetActualPropertyDo) Assign(attrs ...field.AssignExpr) *physicalAssetActualPropertyDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p physicalAssetActualPropertyDo) Joins(fields ...field.RelationField) *physicalAssetActualPropertyDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p physicalAssetActualPropertyDo) Preload(fields ...field.RelationField) *physicalAssetActualPropertyDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p physicalAssetActualPropertyDo) FirstOrInit() (*isa95.PhysicalAssetActualProperty, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetActualProperty), nil
	}
}

func (p physicalAssetActualPropertyDo) FirstOrCreate() (*isa95.PhysicalAssetActualProperty, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PhysicalAssetActualProperty), nil
	}
}

func (p physicalAssetActualPropertyDo) FindByPage(offset int, limit int) (result []*isa95.PhysicalAssetActualProperty, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p physicalAssetActualPropertyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p physicalAssetActualPropertyDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p physicalAssetActualPropertyDo) Delete(models ...*isa95.PhysicalAssetActualProperty) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *physicalAssetActualPropertyDo) withDO(do gen.Dao) *physicalAssetActualPropertyDo {
	p.DO = *do.(*gen.DO)
	return p
}
