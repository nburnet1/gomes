// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newPersonnelSpecificationProp(db *gorm.DB, opts ...gen.DOOption) personnelSpecificationProp {
	_personnelSpecificationProp := personnelSpecificationProp{}

	_personnelSpecificationProp.personnelSpecificationPropDo.UseDB(db, opts...)
	_personnelSpecificationProp.personnelSpecificationPropDo.UseModel(&isa95.PersonnelSpecificationProp{})

	tableName := _personnelSpecificationProp.personnelSpecificationPropDo.TableName()
	_personnelSpecificationProp.ALL = field.NewAsterisk(tableName)
	_personnelSpecificationProp.ID = field.NewUint(tableName, "id")
	_personnelSpecificationProp.CreatedAt = field.NewTime(tableName, "created_at")
	_personnelSpecificationProp.UpdatedAt = field.NewTime(tableName, "updated_at")
	_personnelSpecificationProp.DeletedAt = field.NewField(tableName, "deleted_at")

	_personnelSpecificationProp.fillFieldMap()

	return _personnelSpecificationProp
}

type personnelSpecificationProp struct {
	personnelSpecificationPropDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (p personnelSpecificationProp) Table(newTableName string) *personnelSpecificationProp {
	p.personnelSpecificationPropDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p personnelSpecificationProp) As(alias string) *personnelSpecificationProp {
	p.personnelSpecificationPropDo.DO = *(p.personnelSpecificationPropDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *personnelSpecificationProp) updateTableName(table string) *personnelSpecificationProp {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *personnelSpecificationProp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *personnelSpecificationProp) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p personnelSpecificationProp) clone(db *gorm.DB) personnelSpecificationProp {
	p.personnelSpecificationPropDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p personnelSpecificationProp) replaceDB(db *gorm.DB) personnelSpecificationProp {
	p.personnelSpecificationPropDo.ReplaceDB(db)
	return p
}

type personnelSpecificationPropDo struct{ gen.DO }

func (p personnelSpecificationPropDo) Debug() *personnelSpecificationPropDo {
	return p.withDO(p.DO.Debug())
}

func (p personnelSpecificationPropDo) WithContext(ctx context.Context) *personnelSpecificationPropDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p personnelSpecificationPropDo) ReadDB() *personnelSpecificationPropDo {
	return p.Clauses(dbresolver.Read)
}

func (p personnelSpecificationPropDo) WriteDB() *personnelSpecificationPropDo {
	return p.Clauses(dbresolver.Write)
}

func (p personnelSpecificationPropDo) Session(config *gorm.Session) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Session(config))
}

func (p personnelSpecificationPropDo) Clauses(conds ...clause.Expression) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p personnelSpecificationPropDo) Returning(value interface{}, columns ...string) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p personnelSpecificationPropDo) Not(conds ...gen.Condition) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p personnelSpecificationPropDo) Or(conds ...gen.Condition) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p personnelSpecificationPropDo) Select(conds ...field.Expr) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p personnelSpecificationPropDo) Where(conds ...gen.Condition) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p personnelSpecificationPropDo) Order(conds ...field.Expr) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p personnelSpecificationPropDo) Distinct(cols ...field.Expr) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p personnelSpecificationPropDo) Omit(cols ...field.Expr) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p personnelSpecificationPropDo) Join(table schema.Tabler, on ...field.Expr) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p personnelSpecificationPropDo) LeftJoin(table schema.Tabler, on ...field.Expr) *personnelSpecificationPropDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p personnelSpecificationPropDo) RightJoin(table schema.Tabler, on ...field.Expr) *personnelSpecificationPropDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p personnelSpecificationPropDo) Group(cols ...field.Expr) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p personnelSpecificationPropDo) Having(conds ...gen.Condition) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p personnelSpecificationPropDo) Limit(limit int) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p personnelSpecificationPropDo) Offset(offset int) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p personnelSpecificationPropDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p personnelSpecificationPropDo) Unscoped() *personnelSpecificationPropDo {
	return p.withDO(p.DO.Unscoped())
}

func (p personnelSpecificationPropDo) Create(values ...*isa95.PersonnelSpecificationProp) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p personnelSpecificationPropDo) CreateInBatches(values []*isa95.PersonnelSpecificationProp, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p personnelSpecificationPropDo) Save(values ...*isa95.PersonnelSpecificationProp) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p personnelSpecificationPropDo) First() (*isa95.PersonnelSpecificationProp, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelSpecificationProp), nil
	}
}

func (p personnelSpecificationPropDo) Take() (*isa95.PersonnelSpecificationProp, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelSpecificationProp), nil
	}
}

func (p personnelSpecificationPropDo) Last() (*isa95.PersonnelSpecificationProp, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelSpecificationProp), nil
	}
}

func (p personnelSpecificationPropDo) Find() ([]*isa95.PersonnelSpecificationProp, error) {
	result, err := p.DO.Find()
	return result.([]*isa95.PersonnelSpecificationProp), err
}

func (p personnelSpecificationPropDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.PersonnelSpecificationProp, err error) {
	buf := make([]*isa95.PersonnelSpecificationProp, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p personnelSpecificationPropDo) FindInBatches(result *[]*isa95.PersonnelSpecificationProp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p personnelSpecificationPropDo) Attrs(attrs ...field.AssignExpr) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p personnelSpecificationPropDo) Assign(attrs ...field.AssignExpr) *personnelSpecificationPropDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p personnelSpecificationPropDo) Joins(fields ...field.RelationField) *personnelSpecificationPropDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p personnelSpecificationPropDo) Preload(fields ...field.RelationField) *personnelSpecificationPropDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p personnelSpecificationPropDo) FirstOrInit() (*isa95.PersonnelSpecificationProp, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelSpecificationProp), nil
	}
}

func (p personnelSpecificationPropDo) FirstOrCreate() (*isa95.PersonnelSpecificationProp, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.PersonnelSpecificationProp), nil
	}
}

func (p personnelSpecificationPropDo) FindByPage(offset int, limit int) (result []*isa95.PersonnelSpecificationProp, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p personnelSpecificationPropDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p personnelSpecificationPropDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p personnelSpecificationPropDo) Delete(models ...*isa95.PersonnelSpecificationProp) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *personnelSpecificationPropDo) withDO(do gen.Dao) *personnelSpecificationPropDo {
	p.DO = *do.(*gen.DO)
	return p
}
