// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newUtilizeCategory(db *gorm.DB, opts ...gen.DOOption) utilizeCategory {
	_utilizeCategory := utilizeCategory{}

	_utilizeCategory.utilizeCategoryDo.UseDB(db, opts...)
	_utilizeCategory.utilizeCategoryDo.UseModel(&isa95.UtilizeCategory{})

	tableName := _utilizeCategory.utilizeCategoryDo.TableName()
	_utilizeCategory.ALL = field.NewAsterisk(tableName)
	_utilizeCategory.ID = field.NewUint(tableName, "id")
	_utilizeCategory.CreatedAt = field.NewTime(tableName, "created_at")
	_utilizeCategory.UpdatedAt = field.NewTime(tableName, "updated_at")
	_utilizeCategory.DeletedAt = field.NewField(tableName, "deleted_at")
	_utilizeCategory.Code = field.NewString(tableName, "code")
	_utilizeCategory.Description = field.NewString(tableName, "description")

	_utilizeCategory.fillFieldMap()

	return _utilizeCategory
}

type utilizeCategory struct {
	utilizeCategoryDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Code        field.String
	Description field.String

	fieldMap map[string]field.Expr
}

func (u utilizeCategory) Table(newTableName string) *utilizeCategory {
	u.utilizeCategoryDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u utilizeCategory) As(alias string) *utilizeCategory {
	u.utilizeCategoryDo.DO = *(u.utilizeCategoryDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *utilizeCategory) updateTableName(table string) *utilizeCategory {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Code = field.NewString(table, "code")
	u.Description = field.NewString(table, "description")

	u.fillFieldMap()

	return u
}

func (u *utilizeCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *utilizeCategory) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["code"] = u.Code
	u.fieldMap["description"] = u.Description
}

func (u utilizeCategory) clone(db *gorm.DB) utilizeCategory {
	u.utilizeCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u utilizeCategory) replaceDB(db *gorm.DB) utilizeCategory {
	u.utilizeCategoryDo.ReplaceDB(db)
	return u
}

type utilizeCategoryDo struct{ gen.DO }

func (u utilizeCategoryDo) Debug() *utilizeCategoryDo {
	return u.withDO(u.DO.Debug())
}

func (u utilizeCategoryDo) WithContext(ctx context.Context) *utilizeCategoryDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u utilizeCategoryDo) ReadDB() *utilizeCategoryDo {
	return u.Clauses(dbresolver.Read)
}

func (u utilizeCategoryDo) WriteDB() *utilizeCategoryDo {
	return u.Clauses(dbresolver.Write)
}

func (u utilizeCategoryDo) Session(config *gorm.Session) *utilizeCategoryDo {
	return u.withDO(u.DO.Session(config))
}

func (u utilizeCategoryDo) Clauses(conds ...clause.Expression) *utilizeCategoryDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u utilizeCategoryDo) Returning(value interface{}, columns ...string) *utilizeCategoryDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u utilizeCategoryDo) Not(conds ...gen.Condition) *utilizeCategoryDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u utilizeCategoryDo) Or(conds ...gen.Condition) *utilizeCategoryDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u utilizeCategoryDo) Select(conds ...field.Expr) *utilizeCategoryDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u utilizeCategoryDo) Where(conds ...gen.Condition) *utilizeCategoryDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u utilizeCategoryDo) Order(conds ...field.Expr) *utilizeCategoryDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u utilizeCategoryDo) Distinct(cols ...field.Expr) *utilizeCategoryDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u utilizeCategoryDo) Omit(cols ...field.Expr) *utilizeCategoryDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u utilizeCategoryDo) Join(table schema.Tabler, on ...field.Expr) *utilizeCategoryDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u utilizeCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *utilizeCategoryDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u utilizeCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *utilizeCategoryDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u utilizeCategoryDo) Group(cols ...field.Expr) *utilizeCategoryDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u utilizeCategoryDo) Having(conds ...gen.Condition) *utilizeCategoryDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u utilizeCategoryDo) Limit(limit int) *utilizeCategoryDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u utilizeCategoryDo) Offset(offset int) *utilizeCategoryDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u utilizeCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *utilizeCategoryDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u utilizeCategoryDo) Unscoped() *utilizeCategoryDo {
	return u.withDO(u.DO.Unscoped())
}

func (u utilizeCategoryDo) Create(values ...*isa95.UtilizeCategory) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u utilizeCategoryDo) CreateInBatches(values []*isa95.UtilizeCategory, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u utilizeCategoryDo) Save(values ...*isa95.UtilizeCategory) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u utilizeCategoryDo) First() (*isa95.UtilizeCategory, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.UtilizeCategory), nil
	}
}

func (u utilizeCategoryDo) Take() (*isa95.UtilizeCategory, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.UtilizeCategory), nil
	}
}

func (u utilizeCategoryDo) Last() (*isa95.UtilizeCategory, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.UtilizeCategory), nil
	}
}

func (u utilizeCategoryDo) Find() ([]*isa95.UtilizeCategory, error) {
	result, err := u.DO.Find()
	return result.([]*isa95.UtilizeCategory), err
}

func (u utilizeCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.UtilizeCategory, err error) {
	buf := make([]*isa95.UtilizeCategory, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u utilizeCategoryDo) FindInBatches(result *[]*isa95.UtilizeCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u utilizeCategoryDo) Attrs(attrs ...field.AssignExpr) *utilizeCategoryDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u utilizeCategoryDo) Assign(attrs ...field.AssignExpr) *utilizeCategoryDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u utilizeCategoryDo) Joins(fields ...field.RelationField) *utilizeCategoryDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u utilizeCategoryDo) Preload(fields ...field.RelationField) *utilizeCategoryDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u utilizeCategoryDo) FirstOrInit() (*isa95.UtilizeCategory, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.UtilizeCategory), nil
	}
}

func (u utilizeCategoryDo) FirstOrCreate() (*isa95.UtilizeCategory, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.UtilizeCategory), nil
	}
}

func (u utilizeCategoryDo) FindByPage(offset int, limit int) (result []*isa95.UtilizeCategory, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u utilizeCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u utilizeCategoryDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u utilizeCategoryDo) Delete(models ...*isa95.UtilizeCategory) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *utilizeCategoryDo) withDO(do gen.Dao) *utilizeCategoryDo {
	u.DO = *do.(*gen.DO)
	return u
}
