// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newMaterialDefinitionProp(db *gorm.DB, opts ...gen.DOOption) materialDefinitionProp {
	_materialDefinitionProp := materialDefinitionProp{}

	_materialDefinitionProp.materialDefinitionPropDo.UseDB(db, opts...)
	_materialDefinitionProp.materialDefinitionPropDo.UseModel(&isa95.MaterialDefinitionProp{})

	tableName := _materialDefinitionProp.materialDefinitionPropDo.TableName()
	_materialDefinitionProp.ALL = field.NewAsterisk(tableName)
	_materialDefinitionProp.ID = field.NewUint(tableName, "id")
	_materialDefinitionProp.CreatedAt = field.NewTime(tableName, "created_at")
	_materialDefinitionProp.UpdatedAt = field.NewTime(tableName, "updated_at")
	_materialDefinitionProp.DeletedAt = field.NewField(tableName, "deleted_at")
	_materialDefinitionProp.Code = field.NewString(tableName, "code")
	_materialDefinitionProp.Description = field.NewString(tableName, "description")
	_materialDefinitionProp.Value = field.NewString(tableName, "value")
	_materialDefinitionProp.MeasurementID = field.NewUint(tableName, "measurement_id")

	_materialDefinitionProp.fillFieldMap()

	return _materialDefinitionProp
}

type materialDefinitionProp struct {
	materialDefinitionPropDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Code          field.String
	Description   field.String
	Value         field.String
	MeasurementID field.Uint

	fieldMap map[string]field.Expr
}

func (m materialDefinitionProp) Table(newTableName string) *materialDefinitionProp {
	m.materialDefinitionPropDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m materialDefinitionProp) As(alias string) *materialDefinitionProp {
	m.materialDefinitionPropDo.DO = *(m.materialDefinitionPropDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *materialDefinitionProp) updateTableName(table string) *materialDefinitionProp {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.Code = field.NewString(table, "code")
	m.Description = field.NewString(table, "description")
	m.Value = field.NewString(table, "value")
	m.MeasurementID = field.NewUint(table, "measurement_id")

	m.fillFieldMap()

	return m
}

func (m *materialDefinitionProp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *materialDefinitionProp) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["code"] = m.Code
	m.fieldMap["description"] = m.Description
	m.fieldMap["value"] = m.Value
	m.fieldMap["measurement_id"] = m.MeasurementID
}

func (m materialDefinitionProp) clone(db *gorm.DB) materialDefinitionProp {
	m.materialDefinitionPropDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m materialDefinitionProp) replaceDB(db *gorm.DB) materialDefinitionProp {
	m.materialDefinitionPropDo.ReplaceDB(db)
	return m
}

type materialDefinitionPropDo struct{ gen.DO }

func (m materialDefinitionPropDo) Debug() *materialDefinitionPropDo {
	return m.withDO(m.DO.Debug())
}

func (m materialDefinitionPropDo) WithContext(ctx context.Context) *materialDefinitionPropDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m materialDefinitionPropDo) ReadDB() *materialDefinitionPropDo {
	return m.Clauses(dbresolver.Read)
}

func (m materialDefinitionPropDo) WriteDB() *materialDefinitionPropDo {
	return m.Clauses(dbresolver.Write)
}

func (m materialDefinitionPropDo) Session(config *gorm.Session) *materialDefinitionPropDo {
	return m.withDO(m.DO.Session(config))
}

func (m materialDefinitionPropDo) Clauses(conds ...clause.Expression) *materialDefinitionPropDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m materialDefinitionPropDo) Returning(value interface{}, columns ...string) *materialDefinitionPropDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m materialDefinitionPropDo) Not(conds ...gen.Condition) *materialDefinitionPropDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m materialDefinitionPropDo) Or(conds ...gen.Condition) *materialDefinitionPropDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m materialDefinitionPropDo) Select(conds ...field.Expr) *materialDefinitionPropDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m materialDefinitionPropDo) Where(conds ...gen.Condition) *materialDefinitionPropDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m materialDefinitionPropDo) Order(conds ...field.Expr) *materialDefinitionPropDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m materialDefinitionPropDo) Distinct(cols ...field.Expr) *materialDefinitionPropDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m materialDefinitionPropDo) Omit(cols ...field.Expr) *materialDefinitionPropDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m materialDefinitionPropDo) Join(table schema.Tabler, on ...field.Expr) *materialDefinitionPropDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m materialDefinitionPropDo) LeftJoin(table schema.Tabler, on ...field.Expr) *materialDefinitionPropDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m materialDefinitionPropDo) RightJoin(table schema.Tabler, on ...field.Expr) *materialDefinitionPropDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m materialDefinitionPropDo) Group(cols ...field.Expr) *materialDefinitionPropDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m materialDefinitionPropDo) Having(conds ...gen.Condition) *materialDefinitionPropDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m materialDefinitionPropDo) Limit(limit int) *materialDefinitionPropDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m materialDefinitionPropDo) Offset(offset int) *materialDefinitionPropDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m materialDefinitionPropDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *materialDefinitionPropDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m materialDefinitionPropDo) Unscoped() *materialDefinitionPropDo {
	return m.withDO(m.DO.Unscoped())
}

func (m materialDefinitionPropDo) Create(values ...*isa95.MaterialDefinitionProp) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m materialDefinitionPropDo) CreateInBatches(values []*isa95.MaterialDefinitionProp, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m materialDefinitionPropDo) Save(values ...*isa95.MaterialDefinitionProp) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m materialDefinitionPropDo) First() (*isa95.MaterialDefinitionProp, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialDefinitionProp), nil
	}
}

func (m materialDefinitionPropDo) Take() (*isa95.MaterialDefinitionProp, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialDefinitionProp), nil
	}
}

func (m materialDefinitionPropDo) Last() (*isa95.MaterialDefinitionProp, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialDefinitionProp), nil
	}
}

func (m materialDefinitionPropDo) Find() ([]*isa95.MaterialDefinitionProp, error) {
	result, err := m.DO.Find()
	return result.([]*isa95.MaterialDefinitionProp), err
}

func (m materialDefinitionPropDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.MaterialDefinitionProp, err error) {
	buf := make([]*isa95.MaterialDefinitionProp, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m materialDefinitionPropDo) FindInBatches(result *[]*isa95.MaterialDefinitionProp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m materialDefinitionPropDo) Attrs(attrs ...field.AssignExpr) *materialDefinitionPropDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m materialDefinitionPropDo) Assign(attrs ...field.AssignExpr) *materialDefinitionPropDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m materialDefinitionPropDo) Joins(fields ...field.RelationField) *materialDefinitionPropDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m materialDefinitionPropDo) Preload(fields ...field.RelationField) *materialDefinitionPropDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m materialDefinitionPropDo) FirstOrInit() (*isa95.MaterialDefinitionProp, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialDefinitionProp), nil
	}
}

func (m materialDefinitionPropDo) FirstOrCreate() (*isa95.MaterialDefinitionProp, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialDefinitionProp), nil
	}
}

func (m materialDefinitionPropDo) FindByPage(offset int, limit int) (result []*isa95.MaterialDefinitionProp, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m materialDefinitionPropDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m materialDefinitionPropDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m materialDefinitionPropDo) Delete(models ...*isa95.MaterialDefinitionProp) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *materialDefinitionPropDo) withDO(do gen.Dao) *materialDefinitionPropDo {
	m.DO = *do.(*gen.DO)
	return m
}
