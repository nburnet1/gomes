// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newSegmentResponse(db *gorm.DB, opts ...gen.DOOption) segmentResponse {
	_segmentResponse := segmentResponse{}

	_segmentResponse.segmentResponseDo.UseDB(db, opts...)
	_segmentResponse.segmentResponseDo.UseModel(&isa95.SegmentResponse{})

	tableName := _segmentResponse.segmentResponseDo.TableName()
	_segmentResponse.ALL = field.NewAsterisk(tableName)
	_segmentResponse.ID = field.NewUint(tableName, "id")
	_segmentResponse.CreatedAt = field.NewTime(tableName, "created_at")
	_segmentResponse.UpdatedAt = field.NewTime(tableName, "updated_at")
	_segmentResponse.DeletedAt = field.NewField(tableName, "deleted_at")
	_segmentResponse.Code = field.NewString(tableName, "code")
	_segmentResponse.Description = field.NewString(tableName, "description")
	_segmentResponse.OperationTypeID = field.NewUint(tableName, "operation_type_id")
	_segmentResponse.ProcessSegmentID = field.NewUint(tableName, "process_segment_id")
	_segmentResponse.ActualStartTime = field.NewTime(tableName, "actual_start_time")
	_segmentResponse.ActualEndTime = field.NewTime(tableName, "actual_end_time")
	_segmentResponse.LevelID = field.NewUint(tableName, "level_id")
	_segmentResponse.OperationDefinitionID = field.NewUint(tableName, "operation_definition_id")

	_segmentResponse.fillFieldMap()

	return _segmentResponse
}

type segmentResponse struct {
	segmentResponseDo

	ALL                   field.Asterisk
	ID                    field.Uint
	CreatedAt             field.Time
	UpdatedAt             field.Time
	DeletedAt             field.Field
	Code                  field.String
	Description           field.String
	OperationTypeID       field.Uint
	ProcessSegmentID      field.Uint
	ActualStartTime       field.Time
	ActualEndTime         field.Time
	LevelID               field.Uint
	OperationDefinitionID field.Uint

	fieldMap map[string]field.Expr
}

func (s segmentResponse) Table(newTableName string) *segmentResponse {
	s.segmentResponseDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s segmentResponse) As(alias string) *segmentResponse {
	s.segmentResponseDo.DO = *(s.segmentResponseDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *segmentResponse) updateTableName(table string) *segmentResponse {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Code = field.NewString(table, "code")
	s.Description = field.NewString(table, "description")
	s.OperationTypeID = field.NewUint(table, "operation_type_id")
	s.ProcessSegmentID = field.NewUint(table, "process_segment_id")
	s.ActualStartTime = field.NewTime(table, "actual_start_time")
	s.ActualEndTime = field.NewTime(table, "actual_end_time")
	s.LevelID = field.NewUint(table, "level_id")
	s.OperationDefinitionID = field.NewUint(table, "operation_definition_id")

	s.fillFieldMap()

	return s
}

func (s *segmentResponse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *segmentResponse) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["code"] = s.Code
	s.fieldMap["description"] = s.Description
	s.fieldMap["operation_type_id"] = s.OperationTypeID
	s.fieldMap["process_segment_id"] = s.ProcessSegmentID
	s.fieldMap["actual_start_time"] = s.ActualStartTime
	s.fieldMap["actual_end_time"] = s.ActualEndTime
	s.fieldMap["level_id"] = s.LevelID
	s.fieldMap["operation_definition_id"] = s.OperationDefinitionID
}

func (s segmentResponse) clone(db *gorm.DB) segmentResponse {
	s.segmentResponseDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s segmentResponse) replaceDB(db *gorm.DB) segmentResponse {
	s.segmentResponseDo.ReplaceDB(db)
	return s
}

type segmentResponseDo struct{ gen.DO }

func (s segmentResponseDo) Debug() *segmentResponseDo {
	return s.withDO(s.DO.Debug())
}

func (s segmentResponseDo) WithContext(ctx context.Context) *segmentResponseDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s segmentResponseDo) ReadDB() *segmentResponseDo {
	return s.Clauses(dbresolver.Read)
}

func (s segmentResponseDo) WriteDB() *segmentResponseDo {
	return s.Clauses(dbresolver.Write)
}

func (s segmentResponseDo) Session(config *gorm.Session) *segmentResponseDo {
	return s.withDO(s.DO.Session(config))
}

func (s segmentResponseDo) Clauses(conds ...clause.Expression) *segmentResponseDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s segmentResponseDo) Returning(value interface{}, columns ...string) *segmentResponseDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s segmentResponseDo) Not(conds ...gen.Condition) *segmentResponseDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s segmentResponseDo) Or(conds ...gen.Condition) *segmentResponseDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s segmentResponseDo) Select(conds ...field.Expr) *segmentResponseDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s segmentResponseDo) Where(conds ...gen.Condition) *segmentResponseDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s segmentResponseDo) Order(conds ...field.Expr) *segmentResponseDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s segmentResponseDo) Distinct(cols ...field.Expr) *segmentResponseDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s segmentResponseDo) Omit(cols ...field.Expr) *segmentResponseDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s segmentResponseDo) Join(table schema.Tabler, on ...field.Expr) *segmentResponseDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s segmentResponseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *segmentResponseDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s segmentResponseDo) RightJoin(table schema.Tabler, on ...field.Expr) *segmentResponseDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s segmentResponseDo) Group(cols ...field.Expr) *segmentResponseDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s segmentResponseDo) Having(conds ...gen.Condition) *segmentResponseDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s segmentResponseDo) Limit(limit int) *segmentResponseDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s segmentResponseDo) Offset(offset int) *segmentResponseDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s segmentResponseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *segmentResponseDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s segmentResponseDo) Unscoped() *segmentResponseDo {
	return s.withDO(s.DO.Unscoped())
}

func (s segmentResponseDo) Create(values ...*isa95.SegmentResponse) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s segmentResponseDo) CreateInBatches(values []*isa95.SegmentResponse, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s segmentResponseDo) Save(values ...*isa95.SegmentResponse) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s segmentResponseDo) First() (*isa95.SegmentResponse, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.SegmentResponse), nil
	}
}

func (s segmentResponseDo) Take() (*isa95.SegmentResponse, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.SegmentResponse), nil
	}
}

func (s segmentResponseDo) Last() (*isa95.SegmentResponse, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.SegmentResponse), nil
	}
}

func (s segmentResponseDo) Find() ([]*isa95.SegmentResponse, error) {
	result, err := s.DO.Find()
	return result.([]*isa95.SegmentResponse), err
}

func (s segmentResponseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.SegmentResponse, err error) {
	buf := make([]*isa95.SegmentResponse, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s segmentResponseDo) FindInBatches(result *[]*isa95.SegmentResponse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s segmentResponseDo) Attrs(attrs ...field.AssignExpr) *segmentResponseDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s segmentResponseDo) Assign(attrs ...field.AssignExpr) *segmentResponseDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s segmentResponseDo) Joins(fields ...field.RelationField) *segmentResponseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s segmentResponseDo) Preload(fields ...field.RelationField) *segmentResponseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s segmentResponseDo) FirstOrInit() (*isa95.SegmentResponse, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.SegmentResponse), nil
	}
}

func (s segmentResponseDo) FirstOrCreate() (*isa95.SegmentResponse, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.SegmentResponse), nil
	}
}

func (s segmentResponseDo) FindByPage(offset int, limit int) (result []*isa95.SegmentResponse, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s segmentResponseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s segmentResponseDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s segmentResponseDo) Delete(models ...*isa95.SegmentResponse) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *segmentResponseDo) withDO(do gen.Dao) *segmentResponseDo {
	s.DO = *do.(*gen.DO)
	return s
}
