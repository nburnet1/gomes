// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newMaterialSegment(db *gorm.DB, opts ...gen.DOOption) materialSegment {
	_materialSegment := materialSegment{}

	_materialSegment.materialSegmentDo.UseDB(db, opts...)
	_materialSegment.materialSegmentDo.UseModel(&isa95.MaterialSegment{})

	tableName := _materialSegment.materialSegmentDo.TableName()
	_materialSegment.ALL = field.NewAsterisk(tableName)
	_materialSegment.ID = field.NewUint(tableName, "id")
	_materialSegment.CreatedAt = field.NewTime(tableName, "created_at")
	_materialSegment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_materialSegment.DeletedAt = field.NewField(tableName, "deleted_at")
	_materialSegment.MaterialClassID = field.NewUint(tableName, "material_class_id")
	_materialSegment.MaterialDefinitionID = field.NewUint(tableName, "material_definition_id")
	_materialSegment.Description = field.NewString(tableName, "description")
	_materialSegment.AssemblyTypeID = field.NewUint(tableName, "assembly_type_id")
	_materialSegment.AssemblyRelationshipID = field.NewUint(tableName, "assembly_relationship_id")
	_materialSegment.UseID = field.NewUint(tableName, "use_id")

	_materialSegment.fillFieldMap()

	return _materialSegment
}

type materialSegment struct {
	materialSegmentDo

	ALL                    field.Asterisk
	ID                     field.Uint
	CreatedAt              field.Time
	UpdatedAt              field.Time
	DeletedAt              field.Field
	MaterialClassID        field.Uint
	MaterialDefinitionID   field.Uint
	Description            field.String
	AssemblyTypeID         field.Uint
	AssemblyRelationshipID field.Uint
	UseID                  field.Uint

	fieldMap map[string]field.Expr
}

func (m materialSegment) Table(newTableName string) *materialSegment {
	m.materialSegmentDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m materialSegment) As(alias string) *materialSegment {
	m.materialSegmentDo.DO = *(m.materialSegmentDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *materialSegment) updateTableName(table string) *materialSegment {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.MaterialClassID = field.NewUint(table, "material_class_id")
	m.MaterialDefinitionID = field.NewUint(table, "material_definition_id")
	m.Description = field.NewString(table, "description")
	m.AssemblyTypeID = field.NewUint(table, "assembly_type_id")
	m.AssemblyRelationshipID = field.NewUint(table, "assembly_relationship_id")
	m.UseID = field.NewUint(table, "use_id")

	m.fillFieldMap()

	return m
}

func (m *materialSegment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *materialSegment) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 10)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["material_class_id"] = m.MaterialClassID
	m.fieldMap["material_definition_id"] = m.MaterialDefinitionID
	m.fieldMap["description"] = m.Description
	m.fieldMap["assembly_type_id"] = m.AssemblyTypeID
	m.fieldMap["assembly_relationship_id"] = m.AssemblyRelationshipID
	m.fieldMap["use_id"] = m.UseID
}

func (m materialSegment) clone(db *gorm.DB) materialSegment {
	m.materialSegmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m materialSegment) replaceDB(db *gorm.DB) materialSegment {
	m.materialSegmentDo.ReplaceDB(db)
	return m
}

type materialSegmentDo struct{ gen.DO }

func (m materialSegmentDo) Debug() *materialSegmentDo {
	return m.withDO(m.DO.Debug())
}

func (m materialSegmentDo) WithContext(ctx context.Context) *materialSegmentDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m materialSegmentDo) ReadDB() *materialSegmentDo {
	return m.Clauses(dbresolver.Read)
}

func (m materialSegmentDo) WriteDB() *materialSegmentDo {
	return m.Clauses(dbresolver.Write)
}

func (m materialSegmentDo) Session(config *gorm.Session) *materialSegmentDo {
	return m.withDO(m.DO.Session(config))
}

func (m materialSegmentDo) Clauses(conds ...clause.Expression) *materialSegmentDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m materialSegmentDo) Returning(value interface{}, columns ...string) *materialSegmentDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m materialSegmentDo) Not(conds ...gen.Condition) *materialSegmentDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m materialSegmentDo) Or(conds ...gen.Condition) *materialSegmentDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m materialSegmentDo) Select(conds ...field.Expr) *materialSegmentDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m materialSegmentDo) Where(conds ...gen.Condition) *materialSegmentDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m materialSegmentDo) Order(conds ...field.Expr) *materialSegmentDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m materialSegmentDo) Distinct(cols ...field.Expr) *materialSegmentDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m materialSegmentDo) Omit(cols ...field.Expr) *materialSegmentDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m materialSegmentDo) Join(table schema.Tabler, on ...field.Expr) *materialSegmentDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m materialSegmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *materialSegmentDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m materialSegmentDo) RightJoin(table schema.Tabler, on ...field.Expr) *materialSegmentDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m materialSegmentDo) Group(cols ...field.Expr) *materialSegmentDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m materialSegmentDo) Having(conds ...gen.Condition) *materialSegmentDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m materialSegmentDo) Limit(limit int) *materialSegmentDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m materialSegmentDo) Offset(offset int) *materialSegmentDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m materialSegmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *materialSegmentDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m materialSegmentDo) Unscoped() *materialSegmentDo {
	return m.withDO(m.DO.Unscoped())
}

func (m materialSegmentDo) Create(values ...*isa95.MaterialSegment) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m materialSegmentDo) CreateInBatches(values []*isa95.MaterialSegment, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m materialSegmentDo) Save(values ...*isa95.MaterialSegment) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m materialSegmentDo) First() (*isa95.MaterialSegment, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialSegment), nil
	}
}

func (m materialSegmentDo) Take() (*isa95.MaterialSegment, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialSegment), nil
	}
}

func (m materialSegmentDo) Last() (*isa95.MaterialSegment, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialSegment), nil
	}
}

func (m materialSegmentDo) Find() ([]*isa95.MaterialSegment, error) {
	result, err := m.DO.Find()
	return result.([]*isa95.MaterialSegment), err
}

func (m materialSegmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.MaterialSegment, err error) {
	buf := make([]*isa95.MaterialSegment, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m materialSegmentDo) FindInBatches(result *[]*isa95.MaterialSegment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m materialSegmentDo) Attrs(attrs ...field.AssignExpr) *materialSegmentDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m materialSegmentDo) Assign(attrs ...field.AssignExpr) *materialSegmentDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m materialSegmentDo) Joins(fields ...field.RelationField) *materialSegmentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m materialSegmentDo) Preload(fields ...field.RelationField) *materialSegmentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m materialSegmentDo) FirstOrInit() (*isa95.MaterialSegment, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialSegment), nil
	}
}

func (m materialSegmentDo) FirstOrCreate() (*isa95.MaterialSegment, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.MaterialSegment), nil
	}
}

func (m materialSegmentDo) FindByPage(offset int, limit int) (result []*isa95.MaterialSegment, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m materialSegmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m materialSegmentDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m materialSegmentDo) Delete(models ...*isa95.MaterialSegment) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *materialSegmentDo) withDO(do gen.Dao) *materialSegmentDo {
	m.DO = *do.(*gen.DO)
	return m
}
