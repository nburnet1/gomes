// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package isa95

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gomes/server/internal/model/isa95"
)

func newStatusCategory(db *gorm.DB, opts ...gen.DOOption) statusCategory {
	_statusCategory := statusCategory{}

	_statusCategory.statusCategoryDo.UseDB(db, opts...)
	_statusCategory.statusCategoryDo.UseModel(&isa95.StatusCategory{})

	tableName := _statusCategory.statusCategoryDo.TableName()
	_statusCategory.ALL = field.NewAsterisk(tableName)
	_statusCategory.ID = field.NewUint(tableName, "id")
	_statusCategory.CreatedAt = field.NewTime(tableName, "created_at")
	_statusCategory.UpdatedAt = field.NewTime(tableName, "updated_at")
	_statusCategory.DeletedAt = field.NewField(tableName, "deleted_at")
	_statusCategory.Name = field.NewString(tableName, "name")
	_statusCategory.Description = field.NewString(tableName, "description")

	_statusCategory.fillFieldMap()

	return _statusCategory
}

type statusCategory struct {
	statusCategoryDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Name        field.String
	Description field.String

	fieldMap map[string]field.Expr
}

func (s statusCategory) Table(newTableName string) *statusCategory {
	s.statusCategoryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s statusCategory) As(alias string) *statusCategory {
	s.statusCategoryDo.DO = *(s.statusCategoryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *statusCategory) updateTableName(table string) *statusCategory {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Name = field.NewString(table, "name")
	s.Description = field.NewString(table, "description")

	s.fillFieldMap()

	return s
}

func (s *statusCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *statusCategory) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["description"] = s.Description
}

func (s statusCategory) clone(db *gorm.DB) statusCategory {
	s.statusCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s statusCategory) replaceDB(db *gorm.DB) statusCategory {
	s.statusCategoryDo.ReplaceDB(db)
	return s
}

type statusCategoryDo struct{ gen.DO }

func (s statusCategoryDo) Debug() *statusCategoryDo {
	return s.withDO(s.DO.Debug())
}

func (s statusCategoryDo) WithContext(ctx context.Context) *statusCategoryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s statusCategoryDo) ReadDB() *statusCategoryDo {
	return s.Clauses(dbresolver.Read)
}

func (s statusCategoryDo) WriteDB() *statusCategoryDo {
	return s.Clauses(dbresolver.Write)
}

func (s statusCategoryDo) Session(config *gorm.Session) *statusCategoryDo {
	return s.withDO(s.DO.Session(config))
}

func (s statusCategoryDo) Clauses(conds ...clause.Expression) *statusCategoryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s statusCategoryDo) Returning(value interface{}, columns ...string) *statusCategoryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s statusCategoryDo) Not(conds ...gen.Condition) *statusCategoryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s statusCategoryDo) Or(conds ...gen.Condition) *statusCategoryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s statusCategoryDo) Select(conds ...field.Expr) *statusCategoryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s statusCategoryDo) Where(conds ...gen.Condition) *statusCategoryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s statusCategoryDo) Order(conds ...field.Expr) *statusCategoryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s statusCategoryDo) Distinct(cols ...field.Expr) *statusCategoryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s statusCategoryDo) Omit(cols ...field.Expr) *statusCategoryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s statusCategoryDo) Join(table schema.Tabler, on ...field.Expr) *statusCategoryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s statusCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *statusCategoryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s statusCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *statusCategoryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s statusCategoryDo) Group(cols ...field.Expr) *statusCategoryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s statusCategoryDo) Having(conds ...gen.Condition) *statusCategoryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s statusCategoryDo) Limit(limit int) *statusCategoryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s statusCategoryDo) Offset(offset int) *statusCategoryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s statusCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *statusCategoryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s statusCategoryDo) Unscoped() *statusCategoryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s statusCategoryDo) Create(values ...*isa95.StatusCategory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s statusCategoryDo) CreateInBatches(values []*isa95.StatusCategory, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s statusCategoryDo) Save(values ...*isa95.StatusCategory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s statusCategoryDo) First() (*isa95.StatusCategory, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.StatusCategory), nil
	}
}

func (s statusCategoryDo) Take() (*isa95.StatusCategory, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.StatusCategory), nil
	}
}

func (s statusCategoryDo) Last() (*isa95.StatusCategory, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.StatusCategory), nil
	}
}

func (s statusCategoryDo) Find() ([]*isa95.StatusCategory, error) {
	result, err := s.DO.Find()
	return result.([]*isa95.StatusCategory), err
}

func (s statusCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*isa95.StatusCategory, err error) {
	buf := make([]*isa95.StatusCategory, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s statusCategoryDo) FindInBatches(result *[]*isa95.StatusCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s statusCategoryDo) Attrs(attrs ...field.AssignExpr) *statusCategoryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s statusCategoryDo) Assign(attrs ...field.AssignExpr) *statusCategoryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s statusCategoryDo) Joins(fields ...field.RelationField) *statusCategoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s statusCategoryDo) Preload(fields ...field.RelationField) *statusCategoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s statusCategoryDo) FirstOrInit() (*isa95.StatusCategory, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.StatusCategory), nil
	}
}

func (s statusCategoryDo) FirstOrCreate() (*isa95.StatusCategory, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*isa95.StatusCategory), nil
	}
}

func (s statusCategoryDo) FindByPage(offset int, limit int) (result []*isa95.StatusCategory, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s statusCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s statusCategoryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s statusCategoryDo) Delete(models ...*isa95.StatusCategory) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *statusCategoryDo) withDO(do gen.Dao) *statusCategoryDo {
	s.DO = *do.(*gen.DO)
	return s
}
